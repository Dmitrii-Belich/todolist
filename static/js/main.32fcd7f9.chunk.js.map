{"version":3,"sources":["assets/allFolders.svg","assets/addFolder.svg","components/Folder/index.js","components/Popup/index.js","components/SideBar/index.js","components/Task/index.js","components/TaskFolder/index.js","components/TaskBar/index.js","App.js","index.js"],"names":["Folder","type","text","onClick","activeFolder","color","id","onDeleteFolderClick","style","className","cursor","src","allFoldersSvg","alt","addFolderSvg","backgroundColor","evt","stopPropagation","Popup","isActive","onSubmit","colors","onPopupClose","React","useState","selectedColor","setSelectedColor","inputValue","setInputValue","preventDefault","setTimeout","noValidate","placeholder","onChange","target","value","required","map","hex","disabled","Sidebar","folders","onFolderClick","onAddFolderClick","popupSubmitHandler","isPopupActive","onDrop","sideBarState","setSideBarState","onDragStart","window","navigator","vibrate","onDragEnd","result","destination","index","draggableId","length","droppableId","provided","ref","innerRef","droppableProps","item","toString","draggableProps","dragHandleProps","name","Infinity","Task","task","onTaskClick","onTaskChange","onTaskDelete","folderId","editable","setEditable","textStyle","completed","textDecoration","useRef","onInput","innerText","onBlur","onKeyDown","key","blur","contentEditable","suppressContentEditableWarning","a","current","focus","TaskFolder","currentTasks","onAddTaskButton","onFolderChange","onFolderColorChange","colorId","isColorRedacting","setIsColorRedacting","Tasks","onDropInSameFolder","onDropInEnotherFolder","source","tasks","App","setActiveFolder","localStorage","getItem","JSON","parse","clear","setItem","stringify","DataBaseInitial","lists","setFolders","setPopupActive","find","reIndex","data","findFreeId","array","i","some","deepCopy","newArray","forEach","push","Object","assign","newFolders","itemId","findIndex","splice","nextindex","currentFolder","remainingFolders","taskId","currentTask","remainingTasks","FolderId","listId","previousFolderId","nextFolderId","previousTasks","nextTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32fcd7f9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/allFolders.a862c15f.svg\";","export default __webpack_public_path__ + \"static/media/addFolder.bb82cf25.svg\";","import React from \"react\";\nimport \"./Folder.scss\";\n\nimport allFoldersSvg from \"../../assets/allFolders.svg\";\nimport addFolderSvg from \"../../assets/addFolder.svg\";\n\nexport default function Folder({\n  type,\n  text,\n  onClick,\n  activeFolder,\n  color,\n  id,\n  onDeleteFolderClick,\n}) {\n  const style = type === \"add\" ? { color: \"#767676\" } : {};\n  return (\n    <div\n      className={`sidebar__folder ${\n        id === activeFolder && \"sidebar__folder_type_active\"\n      }`}\n      style={type === \"folder\" ? {} : { cursor: \"pointer\" }}\n      onClick={() => {\n        onClick(id);\n      }}\n    >\n      {type === \"all\" && (\n        <img\n          className=\"sidebar__icon\"\n          src={allFoldersSvg}\n          alt=\"Иконка всех задач\"\n        />\n      )}\n      {type === \"add\" && (\n        <img\n          className=\"sidebar__icon\"\n          src={addFolderSvg}\n          alt=\"Иконка добавления задач\"\n        />\n      )}\n      {type === \"folder\" && (\n        <i\n          className=\"sidebar__icon sidebar__icon_type_folder\"\n          style={{ backgroundColor: color }}\n        ></i>\n      )}\n      <h2 className=\"sidebar__folder-name\" style={style}>\n        {text}\n      </h2>\n      {type === \"folder\" && (\n        <button\n          className=\"sidebar__delete\"\n          onClick={(evt) => {\n            evt.stopPropagation();\n            onDeleteFolderClick(id);\n          }}\n        ></button>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Popup.scss\";\n\nexport default function Popup({ isActive, onSubmit, colors, onPopupClose }) {\n  const [selectedColor, setSelectedColor] = React.useState(1);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  return (\n    <form\n      onSubmit={(evt) => {\n        evt.preventDefault();\n        onSubmit(inputValue, selectedColor);\n        setTimeout(() => {\n          setInputValue(\"\");\n          setSelectedColor(1);\n        }, 200);\n      }}\n      className={`popup ${isActive && \"popup_type_visible\"}`}\n      noValidate\n    >\n      <input\n        className=\"popup__input\"\n        type=\"text\"\n        placeholder=\"Название папки\"\n        onChange={(evt) => {\n          setInputValue(evt.target.value);\n        }}\n        required\n        value={inputValue}\n      ></input>\n      <div className=\"popup__checkboxes\">\n        {colors.map((color) => {\n          return (\n            <i\n              key={color.id}\n              className={`popup__radiobox ${\n                color.id === selectedColor && \"popup__radiobox_type_active\"\n              }`}\n              onClick={() => {\n                setSelectedColor(color.id);\n              }}\n              style={{ backgroundColor: color.hex }}\n            ></i>\n          );\n        })}\n      </div>\n      <button\n        type=\"submit\"\n        className={`popup__submit ${\n          !inputValue && \"popup__submit_type_disabled\"\n        }`}\n        disabled={!inputValue && \"disabled\"}\n      >\n        Добавить\n      </button>\n      <button\n        type=\"button\"\n        className=\"popup__exit\"\n        onClick={() => {\n          onPopupClose();\n          setTimeout(() => {\n            setInputValue(\"\");\n            setSelectedColor(1);\n          }, 200);\n        }}\n      ></button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nimport Folder from \"../Folder\";\nimport \"./SideBar.scss\";\nimport Popup from \"../Popup\";\n\nexport default function Sidebar({\n  folders,\n  activeFolder,\n  onFolderClick,\n  onAddFolderClick,\n  popupSubmitHandler,\n  isPopupActive,\n  colors,\n  onPopupClose,\n  onDeleteFolderClick,\n  onDrop,\n  sideBarState,\n  setSideBarState,\n}) {\n  return (\n    <DragDropContext\n      onDragStart={() => {\n        if (window.navigator.vibrate) {\n          window.navigator.vibrate(50);\n        }\n      }}\n      onDragEnd={(result) => {\n        if (result.destination) {\n          onDrop(result.destination.index, +result.draggableId);\n        }\n      }}\n    >\n      {sideBarState && (\n        <div\n          className=\"sidebar__overlay\"\n          onClick={() => {\n            setSideBarState(!sideBarState);\n          }}\n        ></div>\n      )}\n      <div className={`sidebar ${sideBarState && \"sidebar_active\"}`}>\n        {folders.length !== 0 && (\n          <Folder\n            type=\"all\"\n            text=\"Все задачи\"\n            id={0}\n            activeFolder={activeFolder}\n            onClick={onFolderClick}\n          />\n        )}\n        <Droppable droppableId={\"folder\"}>\n          {(provided) => (\n            <ul\n              className=\"sidebar__folders\"\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {folders.map((item, index) => {\n                return (\n                  <Draggable\n                    draggableId={item.id.toString()}\n                    index={index}\n                    key={item.id}\n                  >\n                    {(provided) => (\n                      <li\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <Folder\n                          type=\"folder\"\n                          text={item.name}\n                          color={item.color}\n                          id={item.id}\n                          activeFolder={activeFolder}\n                          onClick={onFolderClick}\n                          onDeleteFolderClick={onDeleteFolderClick}\n                        />\n                      </li>\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n\n        <Folder\n          type=\"add\"\n          text=\"Добавить папку\"\n          onClick={onAddFolderClick}\n          id={Infinity}\n        />\n        <Popup\n          isActive={isPopupActive}\n          onSubmit={popupSubmitHandler}\n          colors={colors}\n          onPopupClose={onPopupClose}\n        />\n      </div>\n    </DragDropContext>\n  );\n}\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./Task.scss\";\n\nexport default function Task({\n  task,\n  onTaskClick,\n  onTaskChange,\n  onTaskDelete,\n  index,\n  folderId,\n}) {\n  const [inputValue] = React.useState(task.text);\n  const [editable, setEditable] = React.useState(false);\n  const textStyle = task.completed ? { textDecoration: \"line-through\" } : {};\n  const text = React.useRef();\n  return (\n    <Draggable draggableId={task.id.toString()} index={index}>\n      {(provided) => (\n        <li\n          className=\"task\"\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <button\n            className={`task__checkbox ${\n              task.completed && \"task__checkbox_type_active\"\n            }`}\n            onClick={() => {\n              onTaskClick(folderId, task.id);\n            }}\n          ></button>\n          <p\n            className=\"task__text\"\n            style={textStyle}\n            onInput={(evt) => {\n              onTaskChange(folderId, task.id, evt.target.innerText);\n            }}\n            onBlur={(evt) => {\n              onTaskChange(folderId, task.id, evt.target.innerText);\n              setEditable(false);\n            }}\n            onKeyDown={(evt) => {\n              if (evt.key === \"Enter\") {\n                evt.preventDefault();\n                evt.target.blur();\n              }\n            }}\n            contentEditable={editable}\n            suppressContentEditableWarning={true}\n            ref={text}\n          >\n            {inputValue}\n          </p>\n          <button\n            className=\"task__edit\"\n            onClick={async () => {\n              await setEditable(true);\n              text.current.focus();\n            }}\n          ></button>\n\n          <button\n            className=\"task__delete\"\n            onClick={() => {\n              onTaskDelete(folderId, task.id);\n            }}\n          ></button>\n        </li>\n      )}\n    </Draggable>\n  );\n}\n","import React from \"react\";\nimport Task from \"../Task\";\nimport \"./TaskFolder.scss\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nexport default function TaskFolder({\n  name,\n  currentTasks,\n  color,\n  onTaskClick,\n  onTaskChange,\n  onAddTaskButton,\n  id,\n  onTaskDelete,\n  onFolderChange,\n  colors,\n  onFolderColorChange,\n  colorId,\n}) {\n  const [inputValue] = React.useState(name);\n  const [selectedColor, setSelectedColor] = React.useState(colorId);\n  const [isColorRedacting, setIsColorRedacting] = React.useState(false);\n  return (\n    <div className=\"taskFolder\">\n      <h2\n        onInput={(evt) => {\n          onFolderChange(id, evt.target.innerText);\n        }}\n        onBlur={(evt) => {\n          onFolderChange(id, evt.target.innerText);\n        }}\n        onKeyDown={(evt) => {\n          if (evt.key === \"Enter\") {\n            evt.preventDefault();\n            evt.target.blur();\n          }\n        }}\n        className=\"taskFolder__title\"\n        style={{ color: color }}\n        contentEditable=\"true\"\n        suppressContentEditableWarning={true}\n      >\n        {inputValue}\n      </h2>\n      <div className=\"taskFolder__line\"> </div>\n      <div\n        className={`taskFolder__checkboxes  ${\n          isColorRedacting && \"taskFolder__checkboxes_type_visible\"\n        }`}\n      >\n        {colors.map((color) => {\n          return (\n            <i\n              key={color.id}\n              className={`taskFolder__radiobox ${\n                color.id === selectedColor && \"taskFolder__radiobox_type_active\"\n              }`}\n              onClick={() => {\n                setSelectedColor(color.id);\n              }}\n              style={{ backgroundColor: color.hex }}\n            ></i>\n          );\n        })}\n        <button\n          className=\"taskFolder__checkboxes-button\"\n          onClick={() => {\n            onFolderColorChange(id, selectedColor);\n            setIsColorRedacting(false);\n          }}\n        >\n          Применить\n        </button>\n      </div>\n      <button\n        className=\"taskFolder__editColor\"\n        onClick={() => {\n          setIsColorRedacting(!isColorRedacting);\n        }}\n      ></button>\n      <Droppable droppableId={id.toString()}>\n        {(provided) => (\n          <ul ref={provided.innerRef} {...provided.droppableProps}>\n            {currentTasks.map((task, index) => {\n              return (\n                <Task\n                  onTaskDelete={onTaskDelete}\n                  key={task.id}\n                  task={task}\n                  onTaskClick={onTaskClick}\n                  onTaskChange={onTaskChange}\n                  index={index}\n                  folderId={id}\n                />\n              );\n            })}\n            {provided.placeholder}\n          </ul>\n        )}\n      </Droppable>\n\n      {currentTasks.length === 0 && (\n        <p className=\"taskFolder__empty\">Задачи отсутствуют</p>\n      )}\n      <button\n        className=\"taskFolder__add\"\n        onClick={() => {\n          onAddTaskButton(id);\n        }}\n      ></button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"./TaskBar.scss\";\n\nimport TaskFolder from \"../TaskFolder\";\n\nexport default function Tasks({\n  folders,\n  onTaskClick,\n  onTaskChange,\n  onAddTaskButton,\n  onTaskDelete,\n  onFolderChange,\n  colors,\n  onFolderColorChange,\n  onDropInSameFolder,\n  onDropInEnotherFolder,\n}) {\n  return (\n    <DragDropContext\n      onDragStart={() => {\n        if (window.navigator.vibrate) {\n          window.navigator.vibrate(50);\n        }\n      }}\n      onDragEnd={(result) => {\n        if (\n          result.destination &&\n          result.source.droppableId === result.destination.droppableId\n        ) {\n          onDropInSameFolder(\n            result.destination.index,\n            +result.source.droppableId,\n            +result.draggableId\n          );\n        }\n        if (\n          result.destination &&\n          result.source.droppableId !== result.destination.droppableId\n        ) {\n          onDropInEnotherFolder(\n            result.destination.index,\n            +result.source.droppableId,\n            +result.destination.droppableId,\n            +result.draggableId\n          );\n        }\n      }}\n    >\n      <div className=\"taskBar\">\n        {folders.map((item) => {\n          return (\n            <TaskFolder\n              onFolderColorChange={onFolderColorChange}\n              colors={colors}\n              onFolderChange={onFolderChange}\n              onTaskDelete={onTaskDelete}\n              id={item.id}\n              colorId={item.colorId}\n              onAddTaskButton={onAddTaskButton}\n              onTaskChange={onTaskChange}\n              onTaskClick={onTaskClick}\n              key={item.id}\n              name={item.name}\n              currentTasks={item.tasks}\n              color={item.color}\n            />\n          );\n        })}\n        {folders.length === 0 && (\n          <p className=\"taskBar__empty\">Задачи отсутствуют</p>\n        )}\n      </div>\n    </DragDropContext>\n  );\n}\n","import React from \"react\";\nimport Sidebar from \"./components/SideBar\";\nimport TaskBar from \"./components/TaskBar\";\nimport DataBaseInitial from \"./assets/db.json\";\n\nexport default function App() {\n  const [activeFolder, setActiveFolder] = React.useState(0);\n  const [sideBarState, setSideBarState] = React.useState(false);\n  const [folders, setFolders] = React.useState(\n    localStorage.getItem(\"folders\") && !localStorage.getItem(\"tasks\")\n      ? JSON.parse(localStorage.getItem(\"folders\"))\n      : () => {\n          localStorage.clear();\n          localStorage.setItem(\n            \"folders\",\n            JSON.stringify(DataBaseInitial.lists)\n          );\n          return JSON.parse(localStorage.getItem(\"folders\"));\n        }\n  );\n  const [colors] = React.useState(\n    localStorage.getItem(\"colors\")\n      ? JSON.parse(localStorage.getItem(\"colors\"))\n      : () => {\n          localStorage.setItem(\n            \"colors\",\n            JSON.stringify(DataBaseInitial.colors)\n          );\n          return JSON.parse(localStorage.getItem(\"colors\"));\n        }\n  );\n  const [isPopupActive, setPopupActive] = React.useState(false);\n\n  const refreshStorage = (key, data) => {\n    localStorage[key] = JSON.stringify(data);\n  };\n\n  const popupSubmitHandler = (name, colorId) => {\n    const newFolders = deepCopy(folders);\n    newFolders.push({\n      name: name,\n      colorId: colorId,\n      id: folders.length ? folders.length + 1 : 1,\n      tasks: [],\n    });\n    reIndex(newFolders);\n    onPopupClose();\n  };\n\n  const onPopupClose = () => {\n    setPopupActive(false);\n  };\n\n  const onFolderClick = (id) => {\n    setActiveFolder(id);\n  };\n  const onAddFolderClick = () => {\n    setPopupActive(true);\n  };\n  const onDeleteFolderClick = (id) => {\n    setActiveFolder(0);\n    const newFolders = deepCopy(folders);\n    const itemId = newFolders.findIndex((item) => item.id === id);\n    newFolders.splice(itemId, 1);\n    reIndex(newFolders);\n  };\n  const onTaskClick = (folderId, taskId) => {\n    const newFolders = deepCopy(folders);\n    const currentFolder = newFolders.find((item) => item.id === folderId);\n    const currentTask = currentFolder.tasks.find((item) => item.id === taskId);\n    currentTask.completed = !currentTask.completed;\n    reIndex(newFolders);\n  };\n  const onTaskChange = (folderId, taskId, value) => {\n    const newFolders = deepCopy(folders);\n    const currentFolder = newFolders.find((item) => item.id === folderId);\n    const currentTask = currentFolder.tasks.find((item) => item.id === taskId);\n    currentTask.text = value;\n    reIndex(newFolders);\n  };\n  const onAddTaskButton = (FolderId) => {\n    const newFolders = deepCopy(folders);\n    const currentFolder = newFolders.find((item) => item.id === FolderId);\n    currentFolder.tasks.push({\n      listId: FolderId,\n      text: \"\",\n      completed: false,\n      id: findFreeId(FolderId, currentFolder.tasks),\n    });\n    reIndex(newFolders);\n  };\n  const onTaskDelete = (folderId, taskId) => {\n    const newFolders = deepCopy(folders);\n    const currentFolder = newFolders.find((item) => item.id === folderId);\n    const currentTask = currentFolder.tasks.findIndex(\n      (item) => item.id === taskId\n    );\n    currentFolder.tasks.splice(currentTask, 1);\n    reIndex(newFolders);\n  };\n  folders.map((item) => {\n    item.color = colors.find((color) => color.id === item.colorId).hex;\n    return item;\n  });\n  const reIndex = (folders) => {\n    setFolders(folders);\n    refreshStorage(\"folders\", folders);\n  };\n  const onFolderChange = (id, value) => {\n    const newFolders = deepCopy(folders);\n    newFolders.find((item) => item.id === id).name = value;\n    reIndex(newFolders);\n  };\n  const onFolderColorChange = (id, value) => {\n    const newFolders = deepCopy(folders);\n    newFolders.find((item) => item.id === id).colorId = value;\n\n    reIndex(newFolders);\n  };\n\n  const onDropInSameFolder = (nextindex, folderId, taskId) => {\n    const newFolders = deepCopy(folders);\n    const currentTasks = newFolders.find((item) => item.id === folderId).tasks;\n    const currentTask = currentTasks.find((item) => item.id === taskId);\n    currentTasks.splice(\n      currentTasks.findIndex((item) => item.id === taskId),\n      1\n    );\n    const remainingTasks = currentTasks.splice(nextindex);\n    currentTasks.push(currentTask, ...remainingTasks);\n    reIndex(newFolders);\n  };\n  const onDropInEnotherFolder = (\n    nextindex,\n    previousFolderId,\n    nextFolderId,\n    taskId\n  ) => {\n    const newFolders = deepCopy(folders);\n    const previousTasks = newFolders.find(\n      (item) => item.id === previousFolderId\n    ).tasks;\n    const currentTask = previousTasks.find((item) => item.id === taskId);\n    previousTasks.splice(\n      previousTasks.findIndex((item) => item.id === taskId),\n      1\n    );\n    const nextTasks = newFolders.find((item) => item.id === nextFolderId).tasks;\n    currentTask.id = findFreeId(nextFolderId, nextTasks);\n    const remainingTasks = nextTasks.splice(nextindex);\n    nextTasks.push(currentTask, ...remainingTasks);\n    reIndex(newFolders);\n  };\n  const dropFolder = (nextindex, folderId) => {\n    const newFolders = deepCopy(folders);\n    const currentFolder = newFolders.find((item) => item.id === folderId);\n    newFolders.splice(\n      newFolders.findIndex((item) => item.id === folderId),\n      1\n    );\n    const remainingFolders = newFolders.splice(nextindex);\n    newFolders.push(currentFolder, ...remainingFolders);\n    reIndex(newFolders);\n  };\n\n  const findFreeId = (folderId, array) => {\n    if (!array.length) {\n      return +(folderId.toString() + 0);\n    }\n    let i = 0;\n    let id = +(folderId.toString() + i);\n    // eslint-disable-next-line\n    while (array.some((item) => item.id === id)) {\n      id = +(folderId.toString() + i);\n      i++;\n    }\n    return id;\n  };\n\n  const deepCopy = (array) => {\n    const newArray = [];\n    array.forEach((item, index) => {\n      newArray.push(Object.assign({}, item));\n      newArray[index].tasks = [];\n      array[index].tasks.forEach((item) => {\n        newArray[index].tasks.push(Object.assign({}, item));\n      });\n    });\n    return newArray;\n  };\n\n  return (\n    <div className=\"todo\">\n      <button\n        className={`todo__sidebarButton ${\n          sideBarState && \"todo__sidebarButton_type_close\"\n        }`}\n        onClick={() => {\n          setSideBarState(!sideBarState);\n        }}\n      ></button>\n      <Sidebar\n        folders={folders}\n        activeFolder={activeFolder}\n        onAddFolderClick={onAddFolderClick}\n        onFolderClick={onFolderClick}\n        isPopupActive={isPopupActive}\n        popupSubmitHandler={popupSubmitHandler}\n        colors={colors}\n        onPopupClose={onPopupClose}\n        onDeleteFolderClick={onDeleteFolderClick}\n        onDrop={dropFolder}\n        sideBarState={sideBarState}\n        setSideBarState={setSideBarState}\n      />\n      <TaskBar\n        onDropInSameFolder={onDropInSameFolder}\n        onFolderChange={onFolderChange}\n        onTaskDelete={onTaskDelete}\n        onAddTaskButton={onAddTaskButton}\n        onTaskChange={onTaskChange}\n        onTaskClick={onTaskClick}\n        colors={colors}\n        folders={\n          activeFolder === 0\n            ? folders\n            : [folders.find((item) => item.id === activeFolder)]\n        }\n        onFolderColorChange={onFolderColorChange}\n        onDropInEnotherFolder={onDropInEnotherFolder}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}