{"version":3,"sources":["assets/allFolders.svg","assets/addFolder.svg","components/Folder/index.js","components/Popup/index.js","components/SideBar/index.js","components/Task/index.js","components/TaskFolder/index.js","components/TaskBar/index.js","App.js","index.js"],"names":["module","exports","Folder","type","text","onClick","activeFolder","color","id","onDeleteFolderClick","style","className","src","allFoldersSvg","alt","addFolderSvg","backgroundColor","evt","stopPropagation","Popup","isActive","onSubmit","colors","onPopupClose","React","useState","selectedColor","setSelectedColor","inputValue","setInputValue","preventDefault","setTimeout","noValidate","placeholder","onChange","target","value","required","map","key","hex","disabled","Sidebar","folders","onFolderClick","onAddFolderClick","popupSubmitHandler","isPopupActive","length","item","name","Infinity","Task","task","onTaskClick","onTaskChange","onTaskDelete","index","folderId","textStyle","completed","textDecoration","draggableId","toString","provided","ref","innerRef","draggableProps","dragHandleProps","onInput","innerText","onBlur","onKeyDown","blur","contentEditable","suppressContentEditableWarning","TaskFolder","currentTasks","onAddTaskButton","onFolderChange","onFolderColorChange","colorId","isColorRedacting","setIsColorRedacting","droppableId","droppableProps","Tasks","onDropInSameFolder","onDropInEnotherFolder","onDragStart","window","navigator","vibrate","onDragEnd","result","destination","source","console","log","tasks","App","setActiveFolder","localStorage","getItem","JSON","parse","clear","setItem","stringify","DataBaseInitial","lists","setFolders","setPopupActive","find","reIndex","data","newFolders","deepCopy","findFreeId","array","i","some","newArray","forEach","push","Object","assign","itemId","findIndex","splice","nextindex","taskId","currentTask","remainingTasks","currentFolder","FolderId","listId","previousFolderId","nextFolderId","previousTasks","nextTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bb7818b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/allFolders.244e2000.svg\";","module.exports = __webpack_public_path__ + \"static/media/addFolder.ba9a0c8a.svg\";","import React from 'react'\r\nimport \"./Folder.scss\"\r\nimport allFoldersSvg from \"../../assets/allFolders.svg\"\r\nimport addFolderSvg from \"../../assets/addFolder.svg\"\r\n\r\nexport default function Folder({type, text, onClick, activeFolder, color, id, onDeleteFolderClick}) {\r\n    const style = type === \"add\"  ? {color: '#767676'}: {}\r\n    return (\r\n        <div className={`sidebar__folder ${ id === activeFolder && \"sidebar__folder_type_active\"}`} onClick={() => { onClick(id)} }>\r\n            {\r\n               type === \"all\" && (<img className=\"sidebar__icon\" src={allFoldersSvg} alt=\"Иконка всех задач\"  />)\r\n            }\r\n            {\r\n                type === \"add\" && (<img className=\"sidebar__icon\" src={addFolderSvg} alt=\"Иконка добавления задач\"  />)\r\n            }\r\n            {\r\n                type === \"folder\" &&(<i className=\"sidebar__icon sidebar__icon_type_folder\"  style={\r\n                    {backgroundColor: color}\r\n                } ></i>)\r\n            }\r\n            <h2 className=\"sidebar__folder-name\" style={style}>{text}</h2>\r\n            {\r\n                type === \"folder\" &&(<button className=\"sidebar__delete\" onClick={(evt) => {\r\n                    evt.stopPropagation()\r\n                    onDeleteFolderClick(id)\r\n                }}></button>)\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./Popup.scss\";\r\n\r\nexport default function Popup({ isActive, onSubmit, colors, onPopupClose }) {\r\n  const [selectedColor, setSelectedColor] = React.useState(1);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  return (\r\n    <form\r\n      onSubmit={(evt) => {\r\n        evt.preventDefault();\r\n        onSubmit(inputValue, selectedColor);\r\n        setTimeout(()=> {setInputValue('')\r\n            setSelectedColor(1)}, 200)\r\n            }\r\n      }\r\n      className={`popup ${isActive && \"popup_type_visible\"}`}\r\n      noValidate\r\n    >\r\n      <input\r\n        className=\"popup__input\"\r\n        type=\"text\"\r\n        placeholder=\"Название папки\"\r\n        onChange={(evt) => {\r\n          setInputValue(evt.target.value);\r\n        }}\r\n        required\r\n        value={inputValue}\r\n      ></input>\r\n      <div className=\"popup__checkboxes\">\r\n        {colors.map((color) => {\r\n          return (\r\n            <i\r\n              key={color.id}\r\n              className={`popup__radiobox ${\r\n                color.id === selectedColor && \"popup__radiobox_type_active\"\r\n              }`}\r\n              onClick={() => {\r\n                setSelectedColor(color.id);\r\n              }}\r\n              style={{ backgroundColor: color.hex }}\r\n            ></i>\r\n          );\r\n        })}\r\n      </div>\r\n      <button type=\"submit\" className={`popup__submit ${ !inputValue && \"popup__submit_type_disabled\"}`} disabled={!inputValue && \"disabled\"}>\r\n        Добавить\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"popup__exit\"\r\n        onClick={() => {onPopupClose()\r\n            setTimeout(()=> {setInputValue('')\r\n            setSelectedColor(1)}, 200)\r\n            }}\r\n      ></button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Folder from \"../Folder\"\r\nimport \"./SideBar.scss\";\r\nimport Popup from \"../Popup\"\r\n\r\n\r\nexport default function Sidebar({folders, activeFolder, onFolderClick, onAddFolderClick, popupSubmitHandler, isPopupActive, colors, onPopupClose, onDeleteFolderClick}) {\r\n    \r\n    return (\r\n        \r\n        <div className=\"sidebar\">\r\n       {  folders.length !==0 &&   <Folder type=\"all\" text=\"Все задачи\" id={0} activeFolder={activeFolder} onClick={onFolderClick}/>}\r\n            <ul className=\"sidebar__folders\">\r\n            {\r\n                folders.map((item) => {\r\n                    return <li key={item.id}><Folder  type=\"folder\"  text={item.name} color={item.color} id={item.id} activeFolder={activeFolder} onClick={onFolderClick} onDeleteFolderClick={onDeleteFolderClick}/></li>\r\n                })\r\n            }\r\n            </ul>\r\n            <Folder type=\"add\"  text=\"Добавить папку\" onClick={onAddFolderClick} id={Infinity} />\r\n            <Popup isActive={isPopupActive} onSubmit={popupSubmitHandler} colors={colors} onPopupClose={onPopupClose}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Draggable} from 'react-beautiful-dnd';\r\nimport \"./Task.scss\";\r\n\r\nexport default function Task({\r\n  task,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onTaskDelete,\r\nindex,\r\nfolderId\r\n}) {\r\n  const [inputValue] = React.useState(task.text);\r\n  const textStyle = task.completed ? { textDecoration: \"line-through\" } : {};\r\n  return (\r\n    <Draggable draggableId={task.id.toString()} index={index}>\r\n      {(provided) => (\r\n    <li className=\"task\"\r\n    ref={provided.innerRef}\r\n        {...provided.draggableProps}\r\n        {...provided.dragHandleProps}\r\n        \r\n    \r\n    >\r\n      <button\r\n        className={`task__checkbox ${\r\n          task.completed && \"task__checkbox_type_active\"\r\n        }`}\r\n        onClick={() => {\r\n          onTaskClick(folderId, task.id);\r\n        }}\r\n      ></button>\r\n\r\n   \r\n        <p\r\n          className=\"task__text\"\r\n          style={textStyle}\r\n          onInput={(evt) => {\r\n            onTaskChange(folderId, task.id, evt.target.innerText);\r\n          }}\r\n          onBlur={(evt) => {\r\n            onTaskChange(folderId, task.id, evt.target.innerText);\r\n          }}\r\n          onKeyDown={(evt) => {\r\n            if (evt.key === \"Enter\") {\r\n              evt.preventDefault();\r\n              evt.target.blur()\r\n            }\r\n          }}\r\n          contentEditable={!task.completed}\r\n          suppressContentEditableWarning={true}     \r\n        >\r\n          {inputValue}\r\n        </p>\r\n      <button\r\n        className=\"task__delete\"\r\n        onClick={() => {\r\n          onTaskDelete(folderId, task.id);\r\n        }}\r\n      ></button>\r\n    </li> \r\n    )}\r\n    </Draggable>);\r\n}\r\n","import React from \"react\";\r\nimport Task from \"../Task\";\r\nimport \"./TaskFolder.scss\";\r\nimport {Droppable} from 'react-beautiful-dnd';\r\n\r\nexport default function TaskFolder({\r\n  name,\r\n  currentTasks,\r\n  color,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onAddTaskButton,\r\n  id,\r\n  onTaskDelete,\r\n  onFolderChange,\r\n  colors,\r\n  onFolderColorChange,\r\n  colorId,\r\n}) {\r\n  const [inputValue] = React.useState(name);\r\n  const [selectedColor, setSelectedColor] = React.useState(colorId);\r\n  const [isColorRedacting, setIsColorRedacting] = React.useState(false);\r\n  return (\r\n    <div className=\"taskFolder\" >\r\n      <h2\r\n      onInput={(evt) => {\r\n        onFolderChange(id, evt.target.innerText);\r\n      }}\r\n      onBlur={(evt) => {\r\n        onFolderChange(id, evt.target.innerText);\r\n      }}\r\n      onKeyDown={(evt) => {\r\n        if (evt.key === \"Enter\") {\r\n          evt.preventDefault();\r\n          evt.target.blur();\r\n        }\r\n      }}\r\n      className=\"taskFolder__title\"\r\n      style={{ color: color }}\r\n      contentEditable=\"true\"\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {inputValue}\r\n    </h2>\r\n    <div className=\"taskFolder__line\"> </div>\r\n    <div\r\n      className={`taskFolder__checkboxes  ${\r\n        isColorRedacting && \"taskFolder__checkboxes_type_visible\"\r\n      }`}\r\n    >\r\n      {colors.map((color) => {\r\n        return (\r\n          <i\r\n            key={color.id}\r\n            className={`taskFolder__radiobox ${\r\n              color.id === selectedColor && \"taskFolder__radiobox_type_active\"\r\n            }`}\r\n            onClick={() => {\r\n              setSelectedColor(color.id);\r\n            }}\r\n            style={{ backgroundColor: color.hex }}\r\n          ></i>\r\n        );\r\n      })}\r\n      <button\r\n        className=\"taskFolder__checkboxes-button\"\r\n        onClick={() => {\r\n          onFolderColorChange(id, selectedColor);\r\n          setIsColorRedacting(false);\r\n        }}\r\n      >\r\n        Применить\r\n      </button>\r\n    </div>\r\n    <button\r\n      className=\"taskFolder__editColor\"\r\n      onClick={() => {\r\n        setIsColorRedacting(true);\r\n      }}\r\n    ></button>\r\n    <Droppable droppableId={id.toString()}>\r\n  { (provided) =>   (<ul\r\n  ref={provided.innerRef}\r\n  {...provided.droppableProps}\r\n\r\n  >\r\n   { currentTasks.map((task, index) => {\r\n      return (\r\n        <Task\r\n          onTaskDelete={onTaskDelete}\r\n          key={task.id}\r\n          task={task}\r\n          onTaskClick={onTaskClick}\r\n          onTaskChange={onTaskChange}\r\n          index={index}\r\n          folderId={id}\r\n        />\r\n      );\r\n    })}\r\n    {provided.placeholder}\r\n      </ul>)}\r\n    </Droppable>\r\n\r\n    {currentTasks.length === 0 && (\r\n      <p className=\"taskFolder__empty\">Задачи отсутствуют</p>\r\n    )}\r\n    <button\r\n      className=\"taskFolder__add\"\r\n      onClick={() => {\r\n        onAddTaskButton(id);\r\n      }}\r\n    ></button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"./TaskBar.scss\";\r\n\r\nimport TaskFolder from \"../TaskFolder\";\r\n\r\nexport default function Tasks({\r\n  folders,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onAddTaskButton,\r\n  onTaskDelete,\r\n  onFolderChange,\r\n  colors,\r\n  onFolderColorChange,\r\n  onDropInSameFolder,\r\n  onDropInEnotherFolder\r\n}) {\r\n  return (\r\n    <DragDropContext\r\n      onDragStart={() => {\r\n        if (window.navigator.vibrate) {\r\n          window.navigator.vibrate(50);\r\n        }\r\n      }}\r\n      onDragEnd={(result) => {\r\n        if (\r\n          result.destination &&\r\n          result.source.droppableId === result.destination.droppableId\r\n        ) {\r\n          onDropInSameFolder(\r\n            result.destination.index,\r\n            +result.source.droppableId,\r\n            +result.draggableId\r\n          );\r\n        }\r\n        if (\r\n          result.destination &&\r\n          result.source.droppableId !== result.destination.droppableId\r\n        ) {\r\n          console.log(result)\r\n          onDropInEnotherFolder(result.destination.index, +result.source.droppableId, +result.destination.droppableId, +result.draggableId, )\r\n          /* onDropInSameFolder(\r\n            \r\n          ); */\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"taskBar\">\r\n        {folders.map((item) => {\r\n          return (\r\n            <TaskFolder\r\n              onFolderColorChange={onFolderColorChange}\r\n              colors={colors}\r\n              onFolderChange={onFolderChange}\r\n              onTaskDelete={onTaskDelete}\r\n              id={item.id}\r\n              colorId={item.colorId}\r\n              onAddTaskButton={onAddTaskButton}\r\n              onTaskChange={onTaskChange}\r\n              onTaskClick={onTaskClick}\r\n              key={item.id}\r\n              name={item.name}\r\n              currentTasks={item.tasks}\r\n              color={item.color}\r\n            />\r\n          );\r\n        })}\r\n        {folders.length === 0 && (\r\n          <p className=\"taskBar__empty\">Задачи отсутствуют</p>\r\n        )}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Sidebar from \"./components/SideBar\";\r\nimport TaskBar from \"./components/TaskBar\";\r\nimport DataBaseInitial from \"./assets/db.json\";\r\n\r\nexport default function App() {\r\n  const [activeFolder, setActiveFolder] = React.useState(0);\r\n  const [folders, setFolders] = React.useState(\r\n    localStorage.getItem(\"folders\") && !localStorage.getItem(\"tasks\")\r\n      ? JSON.parse(localStorage.getItem(\"folders\"))\r\n      : () => {\r\n          localStorage.clear()\r\n          localStorage.setItem(\r\n            \"folders\",\r\n            JSON.stringify(DataBaseInitial.lists)\r\n          );\r\n          return JSON.parse(localStorage.getItem(\"folders\"));\r\n        }\r\n  );\r\n  const [colors] = React.useState(\r\n    localStorage.getItem(\"colors\")\r\n      ? JSON.parse(localStorage.getItem(\"colors\"))\r\n      : () => {\r\n          localStorage.setItem(\r\n            \"colors\",\r\n            JSON.stringify(DataBaseInitial.colors)\r\n          );\r\n          return JSON.parse(localStorage.getItem(\"colors\"));\r\n        }\r\n  );\r\n  const [isPopupActive, setPopupActive] = React.useState(false);\r\n\r\n  const refreshStorage = (key, data) => {\r\n    localStorage[key] = JSON.stringify(data);\r\n  };\r\n\r\n  const popupSubmitHandler = (name, colorId) => {\r\n    const newFolders = folders;\r\n    newFolders.push({\r\n      name: name,\r\n      colorId: colorId,\r\n      id: folders[folders.length - 1] ? folders[folders.length - 1].id + 1 : 1,\r\n    });\r\n    reIndex(newFolders);\r\n    onPopupClose();\r\n  };\r\n\r\n  const onPopupClose = () => {\r\n    setPopupActive(false);\r\n  };\r\n\r\n  const onFolderClick = (id) => {\r\n    setActiveFolder(id);\r\n  };\r\n  const onAddFolderClick = () => {\r\n    setPopupActive(true);\r\n  };\r\n  const onDeleteFolderClick = (id) => {\r\n    setActiveFolder(0);\r\n    const newFolders = deepCopy(folders);\r\n    const itemId = newFolders.findIndex((item) => item.id === id);\r\n    newFolders.splice(itemId, 1);\r\n    reIndex(newFolders);\r\n  };\r\n  const onTaskClick = (folderId, taskId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === folderId);\r\n    const currentTask = currentFolder.tasks.find((item) => item.id === taskId);\r\n    currentTask.completed = !currentTask.completed;\r\n    reIndex(newFolders);\r\n  };\r\n  const onTaskChange = (folderId, taskId, value) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === folderId);\r\n    const currentTask = currentFolder.tasks.find((item) => item.id === taskId);\r\n    currentTask.text = value;\r\n    reIndex(newFolders);\r\n  };\r\n  const onAddTaskButton = (FolderId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === FolderId);\r\n    currentFolder.tasks.push({\r\n      listId: FolderId,\r\n      text: \"\",\r\n      completed: false,\r\n      id: findFreeId(FolderId, currentFolder.tasks),\r\n    });\r\n    reIndex(newFolders);\r\n  };\r\n  const onTaskDelete = (folderId, taskId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === folderId);\r\n    const currentTask = currentFolder.tasks.findIndex(\r\n      (item) => item.id === taskId\r\n    );\r\n    currentFolder.tasks.splice(currentTask, 1);\r\n    reIndex(newFolders);\r\n  };\r\n  folders.map((item) => {\r\n    item.color = colors.find((color) => color.id === item.colorId).hex;\r\n    return item;\r\n  });\r\n  const reIndex = (folders, tasks) => {\r\n    const newFolders = deepCopy(folders);\r\n    setFolders(newFolders);\r\n    refreshStorage(\"folders\", newFolders);\r\n  };\r\n  const onFolderChange = (id, value) => {\r\n    const newFolders = deepCopy(folders);\r\n    newFolders.find((item) => item.id === id).name = value;\r\n    reIndex(newFolders);\r\n  };\r\n  const onFolderColorChange = (id, value) => {\r\n    const newFolders = deepCopy(folders);\r\n    newFolders.find((item) => item.id === id).colorId = value;\r\n\r\n    reIndex(newFolders);\r\n  };\r\n\r\n  const onDropInSameFolder = (nextindex, folderId, taskId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentTasks = newFolders.find((item) => item.id === folderId).tasks;\r\n    const currentTask = currentTasks.find(\r\n      (item) => item.id === taskId\r\n    ); \r\n    currentTasks.splice(\r\n      currentTasks.findIndex((item) => item.id === taskId),\r\n      1\r\n    );\r\n    const remainingTasks = currentTasks.splice(nextindex);\r\n    currentTasks.push(currentTask, ...remainingTasks);\r\n    reIndex(newFolders);\r\n  };\r\n  const onDropInEnotherFolder = (nextindex, previousFolderId, nextFolderId, taskId) => {\r\n    console.log(nextindex, nextFolderId, previousFolderId,  taskId)\r\n         const newFolders = deepCopy(folders);\r\n      const previousTasks = newFolders.find((item) => item.id === previousFolderId).tasks;\r\n      const currentTask = previousTasks.find(\r\n        (item) => item.id === taskId\r\n      ); \r\n      previousTasks.splice(\r\n        previousTasks.findIndex((item) => item.id === taskId),\r\n        1\r\n      );\r\n      const nextTasks = newFolders.find((item) => item.id === nextFolderId).tasks;\r\n      currentTask.id = findFreeId(nextFolderId, nextTasks)\r\n      const remainingTasks = nextTasks.splice(nextindex);\r\n      nextTasks.push(currentTask, ...remainingTasks);\r\n      reIndex(newFolders);\r\n  };\r\n\r\n  const findFreeId = (folderId, array) =>{\r\n    if (!array.length) {\r\n      return +(folderId.toString()+0)\r\n    }\r\n    let i = 0\r\n    let id = +(folderId.toString()+i)\r\n    // eslint-disable-next-line\r\n    while (array.some(item => item.id === id)) {\r\n      id = +(folderId.toString()+i) \r\n      i++\r\n    }\r\n    return id\r\n\r\n  }\r\n\r\n  const deepCopy = (array) => {\r\n    const newArray = [];\r\n    array.forEach((item, index) => {\r\n      newArray.push(Object.assign({}, item));\r\n      newArray[index].tasks = [];\r\n       array[index].tasks.forEach((item) => {\r\n        newArray[index].tasks.push(Object.assign({}, item));\r\n      }); \r\n    });\r\n    return newArray;\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <Sidebar\r\n        folders={folders}\r\n        activeFolder={activeFolder}\r\n        onAddFolderClick={onAddFolderClick}\r\n        onFolderClick={onFolderClick}\r\n        isPopupActive={isPopupActive}\r\n        popupSubmitHandler={popupSubmitHandler}\r\n        colors={colors}\r\n        onPopupClose={onPopupClose}\r\n        onDeleteFolderClick={onDeleteFolderClick}\r\n      />\r\n      <TaskBar\r\n        onDropInSameFolder={onDropInSameFolder}\r\n        onFolderChange={onFolderChange}\r\n        onTaskDelete={onTaskDelete}\r\n        onAddTaskButton={onAddTaskButton}\r\n        onTaskChange={onTaskChange}\r\n        onTaskClick={onTaskClick}\r\n        colors={colors}\r\n        folders={\r\n          activeFolder === 0\r\n            ? folders\r\n            : [folders.find((item) => item.id === activeFolder)]\r\n        }\r\n        onFolderColorChange={onFolderColorChange}\r\n        onDropInEnotherFolder={onDropInEnotherFolder}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}