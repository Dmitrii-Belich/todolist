{"version":3,"sources":["assets/allFolders.svg","assets/addFolder.svg","components/Folder/index.js","components/Popup/index.js","components/SideBar/index.js","components/Task/index.js","components/TaskFolder/index.js","components/TaskBar/index.js","App.js","index.js"],"names":["module","exports","Folder","type","text","onClick","activeFolder","color","id","onDeleteFolderClick","style","className","src","allFoldersSvg","alt","addFolderSvg","backgroundColor","evt","stopPropagation","Popup","isActive","onSubmit","colors","onPopupClose","React","useState","selectedColor","setSelectedColor","inputValue","setInputValue","preventDefault","setTimeout","noValidate","placeholder","onChange","target","value","required","map","key","hex","disabled","Sidebar","folders","onFolderClick","onAddFolderClick","popupSubmitHandler","isPopupActive","onDrop","sideBarState","setSideBarState","onDragStart","window","navigator","vibrate","onDragEnd","result","console","log","destination","index","draggableId","length","droppableId","provided","ref","innerRef","droppableProps","item","toString","draggableProps","dragHandleProps","name","Infinity","Task","task","onTaskClick","onTaskChange","onTaskDelete","folderId","editable","setEditable","textStyle","completed","textDecoration","useRef","onInput","innerText","onBlur","onKeyDown","blur","contentEditable","suppressContentEditableWarning","a","current","focus","TaskFolder","currentTasks","onAddTaskButton","onFolderChange","onFolderColorChange","colorId","isColorRedacting","setIsColorRedacting","Tasks","onDropInSameFolder","onDropInEnotherFolder","source","tasks","App","setActiveFolder","localStorage","getItem","JSON","parse","clear","setItem","stringify","DataBaseInitial","lists","setFolders","setPopupActive","find","reIndex","data","findFreeId","array","i","some","deepCopy","newArray","forEach","push","Object","assign","newFolders","itemId","findIndex","splice","nextindex","currentFolder","remainingFolders","taskId","currentTask","remainingTasks","FolderId","listId","previousFolderId","nextFolderId","previousTasks","nextTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a470bab3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/allFolders.733abe6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/addFolder.35b06433.svg\";","import React from 'react'\r\nimport \"./Folder.scss\"\r\n\r\nimport allFoldersSvg from \"../../assets/allFolders.svg\"\r\nimport addFolderSvg from \"../../assets/addFolder.svg\"\r\n\r\nexport default function Folder({ type, text, onClick, activeFolder, color, id, onDeleteFolderClick }) {\r\n    const style = type === \"add\" ? { color: '#767676' } : {}\r\n    return (\r\n        <div className={`sidebar__folder ${id === activeFolder && \"sidebar__folder_type_active\"}`} onClick={() => { onClick(id) }}>\r\n            {\r\n                type === \"all\" && (<img className=\"sidebar__icon\" src={allFoldersSvg} alt=\"Иконка всех задач\" />)\r\n            }\r\n            {\r\n                type === \"add\" && (<img className=\"sidebar__icon\" src={addFolderSvg} alt=\"Иконка добавления задач\" />)\r\n            }\r\n            {\r\n                type === \"folder\" && (<i className=\"sidebar__icon sidebar__icon_type_folder\" style={\r\n                    { backgroundColor: color }\r\n                } ></i>)\r\n            }\r\n            <h2 className=\"sidebar__folder-name\" style={style}>{text}</h2>\r\n            {\r\n                type === \"folder\" && (<button className=\"sidebar__delete\" onClick={(evt) => {\r\n                    evt.stopPropagation()\r\n                    onDeleteFolderClick(id)\r\n                }}></button>)\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./Popup.scss\";\r\n\r\nexport default function Popup({ isActive, onSubmit, colors, onPopupClose }) {\r\n  const [selectedColor, setSelectedColor] = React.useState(1);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  return (\r\n    <form\r\n      onSubmit={(evt) => {\r\n        evt.preventDefault();\r\n        onSubmit(inputValue, selectedColor);\r\n        setTimeout(()=> {setInputValue('')\r\n            setSelectedColor(1)}, 200)\r\n            }\r\n      }\r\n      className={`popup ${isActive && \"popup_type_visible\"}`}\r\n      noValidate\r\n    >\r\n      <input\r\n        className=\"popup__input\"\r\n        type=\"text\"\r\n        placeholder=\"Название папки\"\r\n        onChange={(evt) => {\r\n          setInputValue(evt.target.value);\r\n        }}\r\n        required\r\n        value={inputValue}\r\n      ></input>\r\n      <div className=\"popup__checkboxes\">\r\n        {colors.map((color) => {\r\n          return (\r\n            <i\r\n              key={color.id}\r\n              className={`popup__radiobox ${\r\n                color.id === selectedColor && \"popup__radiobox_type_active\"\r\n              }`}\r\n              onClick={() => {\r\n                setSelectedColor(color.id);\r\n              }}\r\n              style={{ backgroundColor: color.hex }}\r\n            ></i>\r\n          );\r\n        })}\r\n      </div>\r\n      <button type=\"submit\" className={`popup__submit ${ !inputValue && \"popup__submit_type_disabled\"}`} disabled={!inputValue && \"disabled\"}>\r\n        Добавить\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"popup__exit\"\r\n        onClick={() => {onPopupClose()\r\n            setTimeout(()=> {setInputValue('')\r\n            setSelectedColor(1)}, 200)\r\n            }}\r\n      ></button>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport Folder from \"../Folder\";\r\nimport \"./SideBar.scss\";\r\nimport Popup from \"../Popup\";\r\n\r\nexport default function Sidebar({\r\n  folders,\r\n  activeFolder,\r\n  onFolderClick,\r\n  onAddFolderClick,\r\n  popupSubmitHandler,\r\n  isPopupActive,\r\n  colors,\r\n  onPopupClose,\r\n  onDeleteFolderClick,\r\n  onDrop,\r\n  sideBarState,\r\n  setSideBarState,\r\n}) {\r\n  return (\r\n    <DragDropContext\r\n      onDragStart={() => {\r\n        if (window.navigator.vibrate) {\r\n          window.navigator.vibrate(50);\r\n        }\r\n      }}\r\n      onDragEnd={(result) => {\r\n        console.log(\"drop\", result);\r\n        if (result.destination) {\r\n          onDrop(result.destination.index, +result.draggableId);\r\n        }\r\n      }}\r\n    >\r\n        {sideBarState && <div className=\"sidebar__overlay\" onClick={() => {\r\n            setSideBarState(!sideBarState)\r\n        }}></div>}\r\n      <div className={`sidebar ${sideBarState && \"sidebar_active\"}`}>\r\n        {folders.length !== 0 && (\r\n          <Folder\r\n            type=\"all\"\r\n            text=\"Все задачи\"\r\n            id={0}\r\n            activeFolder={activeFolder}\r\n            onClick={onFolderClick}\r\n          />\r\n        )}\r\n        <Droppable droppableId={\"folder\"}>\r\n          {(provided) => (\r\n            <ul\r\n              className=\"sidebar__folders\"\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              {folders.map((item, index) => {\r\n                return (\r\n                  <Draggable\r\n                    draggableId={item.id.toString()}\r\n                    index={index}\r\n                    key={item.id}\r\n                  >\r\n                    {(provided) => (\r\n                      <li\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <Folder\r\n                          type=\"folder\"\r\n                          text={item.name}\r\n                          color={item.color}\r\n                          id={item.id}\r\n                          activeFolder={activeFolder}\r\n                          onClick={onFolderClick}\r\n                          onDeleteFolderClick={onDeleteFolderClick}\r\n                        />\r\n                      </li>\r\n                    )}\r\n                  </Draggable>\r\n                );\r\n              })}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n\r\n        <Folder\r\n          type=\"add\"\r\n          text=\"Добавить папку\"\r\n          onClick={onAddFolderClick}\r\n          id={Infinity}\r\n        />\r\n        <Popup\r\n          isActive={isPopupActive}\r\n          onSubmit={popupSubmitHandler}\r\n          colors={colors}\r\n          onPopupClose={onPopupClose}\r\n        />\r\n        \r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport \"./Task.scss\";\r\n\r\nexport default function Task({\r\n  task,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onTaskDelete,\r\n  index,\r\n  folderId\r\n}) {\r\n  const [inputValue] = React.useState(task.text);\r\n  const [editable, setEditable] = React.useState(false)\r\n  const textStyle = task.completed ? { textDecoration: \"line-through\" } : {};\r\n  const text = React.useRef()\r\n  return (\r\n    <Draggable draggableId={task.id.toString()} index={index}>\r\n      {(provided) => (\r\n        <li className=\"task\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <button\r\n            className={`task__checkbox ${\r\n              task.completed && \"task__checkbox_type_active\"\r\n              }`}\r\n            onClick={() => {\r\n              onTaskClick(folderId, task.id);\r\n            }}\r\n          ></button>\r\n          <p\r\n            className=\"task__text\"\r\n            style={textStyle}\r\n            onInput={(evt) => {\r\n              onTaskChange(folderId, task.id, evt.target.innerText);\r\n            }}\r\n            onBlur={(evt) => {\r\n              onTaskChange(folderId, task.id, evt.target.innerText);\r\n              setEditable(false)\r\n            }}\r\n            onKeyDown={(evt) => {\r\n              if (evt.key === \"Enter\") {\r\n                evt.preventDefault();\r\n                evt.target.blur()\r\n              }\r\n            }}\r\n            contentEditable={editable}\r\n            suppressContentEditableWarning={true}\r\n            ref={text}\r\n          >\r\n            {inputValue}\r\n          </p>\r\n          <button className=\"task__edit\" onClick={async ()=> {\r\n            await setEditable(true)\r\n            text.current.focus()\r\n          }}></button>\r\n      \r\n          <button\r\n            className=\"task__delete\"\r\n            onClick={() => {\r\n              onTaskDelete(folderId, task.id);\r\n            }}\r\n          ></button>\r\n          \r\n        </li>\r\n      )}\r\n    </Draggable>);\r\n}\r\n","import React from \"react\";\r\nimport Task from \"../Task\";\r\nimport \"./TaskFolder.scss\";\r\nimport {Droppable} from 'react-beautiful-dnd';\r\n\r\nexport default function TaskFolder({\r\n  name,\r\n  currentTasks,\r\n  color,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onAddTaskButton,\r\n  id,\r\n  onTaskDelete,\r\n  onFolderChange,\r\n  colors,\r\n  onFolderColorChange,\r\n  colorId,\r\n}) {\r\n  const [inputValue] = React.useState(name);\r\n  const [selectedColor, setSelectedColor] = React.useState(colorId);\r\n  const [isColorRedacting, setIsColorRedacting] = React.useState(false);\r\n  return (\r\n    <div className=\"taskFolder\" >\r\n      <h2\r\n      onInput={(evt) => {\r\n        onFolderChange(id, evt.target.innerText);\r\n      }}\r\n      onBlur={(evt) => {\r\n        onFolderChange(id, evt.target.innerText);\r\n      }}\r\n      onKeyDown={(evt) => {\r\n        if (evt.key === \"Enter\") {\r\n          evt.preventDefault();\r\n          evt.target.blur();\r\n        }\r\n      }}\r\n      className=\"taskFolder__title\"\r\n      style={{ color: color }}\r\n      contentEditable=\"true\"\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {inputValue}\r\n    </h2>\r\n    <div className=\"taskFolder__line\"> </div>\r\n    <div\r\n      className={`taskFolder__checkboxes  ${\r\n        isColorRedacting && \"taskFolder__checkboxes_type_visible\"\r\n      }`}\r\n    >\r\n      {colors.map((color) => {\r\n        return (\r\n          <i\r\n            key={color.id}\r\n            className={`taskFolder__radiobox ${\r\n              color.id === selectedColor && \"taskFolder__radiobox_type_active\"\r\n            }`}\r\n            onClick={() => {\r\n              setSelectedColor(color.id);\r\n            }}\r\n            style={{ backgroundColor: color.hex }}\r\n          ></i>\r\n        );\r\n      })}\r\n      <button\r\n        className=\"taskFolder__checkboxes-button\"\r\n        onClick={() => {\r\n          onFolderColorChange(id, selectedColor);\r\n          setIsColorRedacting(false);\r\n        }}\r\n      >\r\n        Применить\r\n      </button>\r\n    </div>\r\n    <button\r\n      className=\"taskFolder__editColor\"\r\n      onClick={() => {\r\n        setIsColorRedacting(!isColorRedacting);\r\n      }}\r\n    ></button>\r\n    <Droppable droppableId={id.toString()}>\r\n  { (provided) =>   (<ul\r\n  ref={provided.innerRef}\r\n  {...provided.droppableProps}\r\n\r\n  >\r\n   { currentTasks.map((task, index) => {\r\n      return (\r\n        <Task\r\n          onTaskDelete={onTaskDelete}\r\n          key={task.id}\r\n          task={task}\r\n          onTaskClick={onTaskClick}\r\n          onTaskChange={onTaskChange}\r\n          index={index}\r\n          folderId={id}\r\n        />\r\n      );\r\n    })}\r\n    {provided.placeholder}\r\n      </ul>)}\r\n    </Droppable>\r\n\r\n    {currentTasks.length === 0 && (\r\n      <p className=\"taskFolder__empty\">Задачи отсутствуют</p>\r\n    )}\r\n    <button\r\n      className=\"taskFolder__add\"\r\n      onClick={() => {\r\n        onAddTaskButton(id);\r\n      }}\r\n    ></button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"./TaskBar.scss\";\r\n\r\nimport TaskFolder from \"../TaskFolder\";\r\n\r\nexport default function Tasks({\r\n  folders,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onAddTaskButton,\r\n  onTaskDelete,\r\n  onFolderChange,\r\n  colors,\r\n  onFolderColorChange,\r\n  onDropInSameFolder,\r\n  onDropInEnotherFolder\r\n}) {\r\n  return (\r\n    <DragDropContext\r\n      onDragStart={() => {\r\n        if (window.navigator.vibrate) {\r\n          window.navigator.vibrate(50);\r\n        }\r\n      }}\r\n      onDragEnd={(result) => {\r\n        if (\r\n          result.destination &&\r\n          result.source.droppableId === result.destination.droppableId\r\n        ) {\r\n          onDropInSameFolder(\r\n            result.destination.index,\r\n            +result.source.droppableId,\r\n            +result.draggableId\r\n          );\r\n        }\r\n        if (\r\n          result.destination &&\r\n          result.source.droppableId !== result.destination.droppableId\r\n        ) {\r\n          console.log(result)\r\n          onDropInEnotherFolder(result.destination.index, +result.source.droppableId, +result.destination.droppableId, +result.draggableId, )\r\n          /* onDropInSameFolder(\r\n            \r\n          ); */\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"taskBar\">\r\n        {folders.map((item) => {\r\n          return (\r\n            <TaskFolder\r\n              onFolderColorChange={onFolderColorChange}\r\n              colors={colors}\r\n              onFolderChange={onFolderChange}\r\n              onTaskDelete={onTaskDelete}\r\n              id={item.id}\r\n              colorId={item.colorId}\r\n              onAddTaskButton={onAddTaskButton}\r\n              onTaskChange={onTaskChange}\r\n              onTaskClick={onTaskClick}\r\n              key={item.id}\r\n              name={item.name}\r\n              currentTasks={item.tasks}\r\n              color={item.color}\r\n            />\r\n          );\r\n        })}\r\n        {folders.length === 0 && (\r\n          <p className=\"taskBar__empty\">Задачи отсутствуют</p>\r\n        )}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Sidebar from \"./components/SideBar\";\r\nimport TaskBar from \"./components/TaskBar\";\r\nimport DataBaseInitial from \"./assets/db.json\";\r\n\r\nexport default function App() {\r\n  const [activeFolder, setActiveFolder] = React.useState(0);\r\n  const [sideBarState, setSideBarState] = React.useState(false)\r\n  const [folders, setFolders] = React.useState(\r\n    localStorage.getItem(\"folders\") && !localStorage.getItem(\"tasks\")\r\n      ? JSON.parse(localStorage.getItem(\"folders\"))\r\n      : () => {\r\n          localStorage.clear();\r\n          localStorage.setItem(\r\n            \"folders\",\r\n            JSON.stringify(DataBaseInitial.lists)\r\n          );\r\n          return JSON.parse(localStorage.getItem(\"folders\"));\r\n        }\r\n  );\r\n  const [colors] = React.useState(\r\n    localStorage.getItem(\"colors\")\r\n      ? JSON.parse(localStorage.getItem(\"colors\"))\r\n      : () => {\r\n          localStorage.setItem(\r\n            \"colors\",\r\n            JSON.stringify(DataBaseInitial.colors)\r\n          );\r\n          return JSON.parse(localStorage.getItem(\"colors\"));\r\n        }\r\n  );\r\n  const [isPopupActive, setPopupActive] = React.useState(false);\r\n\r\n  const refreshStorage = (key, data) => {\r\n    localStorage[key] = JSON.stringify(data);\r\n  };\r\n\r\n  const popupSubmitHandler = (name, colorId) => {\r\n    const newFolders = deepCopy(folders);\r\n    newFolders.push({\r\n      name: name,\r\n      colorId: colorId,\r\n      id: folders.length ? folders.length + 1 : 1,\r\n      tasks: []\r\n    });\r\n    reIndex(newFolders);\r\n    onPopupClose();\r\n  };\r\n\r\n  const onPopupClose = () => {\r\n    setPopupActive(false);\r\n  };\r\n\r\n  const onFolderClick = (id) => {\r\n    setActiveFolder(id);\r\n  };\r\n  const onAddFolderClick = () => {\r\n    setPopupActive(true);\r\n  };\r\n  const onDeleteFolderClick = (id) => {\r\n    setActiveFolder(0);\r\n    const newFolders = deepCopy(folders);\r\n    const itemId = newFolders.findIndex((item) => item.id === id);\r\n    newFolders.splice(itemId, 1);\r\n    reIndex(newFolders);\r\n  };\r\n  const onTaskClick = (folderId, taskId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === folderId);\r\n    const currentTask = currentFolder.tasks.find((item) => item.id === taskId);\r\n    currentTask.completed = !currentTask.completed;\r\n    reIndex(newFolders);\r\n  };\r\n  const onTaskChange = (folderId, taskId, value) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === folderId);\r\n    const currentTask = currentFolder.tasks.find((item) => item.id === taskId);\r\n    currentTask.text = value;\r\n    reIndex(newFolders);\r\n  };\r\n  const onAddTaskButton = (FolderId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === FolderId);\r\n    currentFolder.tasks.push({\r\n      listId: FolderId,\r\n      text: \"\",\r\n      completed: false,\r\n      id: findFreeId(FolderId, currentFolder.tasks),\r\n    });\r\n    reIndex(newFolders);\r\n  };\r\n  const onTaskDelete = (folderId, taskId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === folderId);\r\n    const currentTask = currentFolder.tasks.findIndex(\r\n      (item) => item.id === taskId\r\n    );\r\n    currentFolder.tasks.splice(currentTask, 1);\r\n    reIndex(newFolders);\r\n  };\r\n  folders.map((item) => {\r\n    item.color = colors.find((color) => color.id === item.colorId).hex;\r\n    return item;\r\n  });\r\n  const reIndex = (folders) => {\r\n    setFolders(folders);\r\n    refreshStorage(\"folders\", folders);\r\n  };\r\n  const onFolderChange = (id, value) => {\r\n    const newFolders = deepCopy(folders);\r\n    newFolders.find((item) => item.id === id).name = value;\r\n    reIndex(newFolders);\r\n  };\r\n  const onFolderColorChange = (id, value) => {\r\n    const newFolders = deepCopy(folders);\r\n    newFolders.find((item) => item.id === id).colorId = value;\r\n\r\n    reIndex(newFolders);\r\n  };\r\n\r\n  const onDropInSameFolder = (nextindex, folderId, taskId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentTasks = newFolders.find((item) => item.id === folderId).tasks;\r\n    const currentTask = currentTasks.find((item) => item.id === taskId);\r\n    currentTasks.splice(\r\n      currentTasks.findIndex((item) => item.id === taskId),\r\n      1\r\n    );\r\n    const remainingTasks = currentTasks.splice(nextindex);\r\n    currentTasks.push(currentTask, ...remainingTasks);\r\n    reIndex(newFolders);\r\n  };\r\n  const onDropInEnotherFolder = (\r\n    nextindex,\r\n    previousFolderId,\r\n    nextFolderId,\r\n    taskId\r\n  ) => {\r\n    console.log(nextindex, nextFolderId, previousFolderId, taskId);\r\n    const newFolders = deepCopy(folders);\r\n    const previousTasks = newFolders.find(\r\n      (item) => item.id === previousFolderId\r\n    ).tasks;\r\n    const currentTask = previousTasks.find((item) => item.id === taskId);\r\n    previousTasks.splice(\r\n      previousTasks.findIndex((item) => item.id === taskId),\r\n      1\r\n    );\r\n    const nextTasks = newFolders.find((item) => item.id === nextFolderId).tasks;\r\n    currentTask.id = findFreeId(nextFolderId, nextTasks);\r\n    const remainingTasks = nextTasks.splice(nextindex);\r\n    nextTasks.push(currentTask, ...remainingTasks);\r\n    reIndex(newFolders);\r\n  };\r\n  const dropFolder = (nextindex, folderId) => {\r\n    const newFolders = deepCopy(folders);\r\n    const currentFolder = newFolders.find((item) => item.id === folderId);\r\n    newFolders.splice(\r\n      newFolders.findIndex((item) => item.id === folderId),\r\n      1\r\n    );\r\n    const remainingFolders = newFolders.splice(nextindex);\r\n    newFolders.push(currentFolder, ...remainingFolders);\r\n    reIndex(newFolders);\r\n  };\r\n\r\n  const findFreeId = (folderId, array) => {\r\n    if (!array.length) {\r\n      return +(folderId.toString() + 0);\r\n    }\r\n    let i = 0;\r\n    let id = +(folderId.toString() + i);\r\n    // eslint-disable-next-line\r\n    while (array.some((item) => item.id === id)) {\r\n      id = +(folderId.toString() + i);\r\n      i++;\r\n    }\r\n    return id;\r\n  };\r\n\r\n  const deepCopy = (array) => {\r\n    const newArray = [];\r\n    array.forEach((item, index) => {\r\n      newArray.push(Object.assign({}, item));\r\n      newArray[index].tasks = [];\r\n      array[index].tasks.forEach((item) => {\r\n        newArray[index].tasks.push(Object.assign({}, item));\r\n      });\r\n    });\r\n    return newArray;\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <button\r\n        className={`todo__sidebarButton ${\r\n          sideBarState && \"todo__sidebarButton_type_close\"\r\n        }`}\r\n        onClick={() => {\r\n          setSideBarState(!sideBarState);\r\n        }}\r\n      ></button>\r\n      <Sidebar\r\n        folders={folders}\r\n        activeFolder={activeFolder}\r\n        onAddFolderClick={onAddFolderClick}\r\n        onFolderClick={onFolderClick}\r\n        isPopupActive={isPopupActive}\r\n        popupSubmitHandler={popupSubmitHandler}\r\n        colors={colors}\r\n        onPopupClose={onPopupClose}\r\n        onDeleteFolderClick={onDeleteFolderClick}\r\n        onDrop={dropFolder}\r\n        sideBarState={sideBarState}\r\n        setSideBarState={setSideBarState}\r\n      />\r\n      <TaskBar\r\n        onDropInSameFolder={onDropInSameFolder}\r\n        onFolderChange={onFolderChange}\r\n        onTaskDelete={onTaskDelete}\r\n        onAddTaskButton={onAddTaskButton}\r\n        onTaskChange={onTaskChange}\r\n        onTaskClick={onTaskClick}\r\n        colors={colors}\r\n        folders={\r\n          activeFolder === 0\r\n            ? folders\r\n            : [folders.find((item) => item.id === activeFolder)]\r\n        }\r\n        onFolderColorChange={onFolderColorChange}\r\n        onDropInEnotherFolder={onDropInEnotherFolder}\r\n      />\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}