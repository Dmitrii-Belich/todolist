{"version":3,"sources":["assets/allFolders.svg","assets/addFolder.svg","components/Folder/index.js","components/Popup/index.js","components/SideBar/index.js","components/Task/index.js","components/TaskFolder/index.js","components/TaskBar/index.js","App.js","index.js"],"names":["module","exports","Folder","type","text","onClick","activeFolder","color","id","onDeleteFolderClick","style","className","src","allFoldersSvg","alt","addFolderSvg","backgroundColor","evt","stopPropagation","Popup","isActive","onSubmit","colors","onPopupClose","React","useState","selectedColor","setSelectedColor","inputValue","setInputValue","preventDefault","setTimeout","noValidate","placeholder","onChange","target","value","required","map","key","hex","disabled","Sidebar","folders","onFolderClick","onAddFolderClick","popupSubmitHandler","isPopupActive","length","item","name","Infinity","Task","task","onTaskClick","onTaskChange","onTaskDelete","textStyle","completed","textDecoration","onInput","innerText","onBlur","onKeyDown","blur","contentEditable","suppressContentEditableWarning","TaskFolder","currentTasks","onAddTaskButton","onFolderChange","onFolderColorChange","colorId","isColorRedacting","setIsColorRedacting","Tasks","tasks","filter","listId","App","setActiveFolder","localStorage","getItem","JSON","parse","setItem","stringify","DataBaseInitial","lists","setFolders","setTasks","setPopupActive","refreshStorage","data","find","reIndex","newFolders","newTasks","taskIndex","folder","folderIndex","push","itemId","findIndex","splice","taskId","FolderId","console","log","newTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g/EAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,iSCK5B,SAASC,EAAT,GAAsF,IAArEC,EAAoE,EAApEA,KAAMC,EAA8D,EAA9DA,KAAMC,EAAwD,EAAxDA,QAASC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,oBACpEC,EAAiB,QAATP,EAAkB,CAACI,MAAO,WAAY,GACpD,OACI,yBAAKI,UAAS,0BAAsBH,IAAOF,GAAgB,+BAAiCD,QAAS,WAAQA,EAAQG,KAErG,QAATL,GAAmB,yBAAKQ,UAAU,gBAAgBC,IAAKC,IAAeC,IAAI,iGAGhE,QAATX,GAAmB,yBAAKQ,UAAU,gBAAgBC,IAAKG,IAAcD,IAAI,qIAGhE,WAATX,GAAqB,uBAAGQ,UAAU,0CAA2CD,MACzE,CAACM,gBAAiBT,KAG1B,wBAAII,UAAU,uBAAuBD,MAAOA,GAAQN,GAEvC,WAATD,GAAqB,4BAAQQ,UAAU,kBAAkBN,QAAS,SAACY,GAC/DA,EAAIC,kBACJT,EAAoBD,O,YCrBzB,SAASW,EAAT,GAA8D,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,aAAgB,EAChCC,IAAMC,SAAS,GADiB,mBACnEC,EADmE,KACpDC,EADoD,OAEtCH,IAAMC,SAAS,IAFuB,mBAEnEG,EAFmE,KAEvDC,EAFuD,KAG1E,OACE,0BACER,SAAU,SAACJ,GACTA,EAAIa,iBACJT,EAASO,EAAYF,GACrBK,YAAW,WAAMF,EAAc,IAC3BF,EAAiB,KAAK,MAG5BhB,UAAS,gBAAWS,GAAY,sBAChCY,YAAU,GAEV,2BACErB,UAAU,eACVR,KAAK,OACL8B,YAAY,kFACZC,SAAU,SAACjB,GACTY,EAAcZ,EAAIkB,OAAOC,QAE3BC,UAAQ,EACRD,MAAOR,IAET,yBAAKjB,UAAU,qBACZW,EAAOgB,KAAI,SAAC/B,GACX,OACE,uBACEgC,IAAKhC,EAAMC,GACXG,UAAS,0BACPJ,EAAMC,KAAOkB,GAAiB,+BAEhCrB,QAAS,WACPsB,EAAiBpB,EAAMC,KAEzBE,MAAO,CAAEM,gBAAiBT,EAAMiC,WAKxC,4BAAQrC,KAAK,SAASQ,UAAS,yBAAqBiB,GAAc,+BAAiCa,UAAWb,GAAc,YAA5H,oDAGA,4BACEzB,KAAK,SACLQ,UAAU,cACVN,QAAS,WAAOkB,IACZQ,YAAW,WAAMF,EAAc,IAC/BF,EAAiB,KAAK,SC7CnB,SAASe,EAAT,GAA0J,IAAxIC,EAAuI,EAAvIA,QAASrC,EAA8H,EAA9HA,aAAcsC,EAAgH,EAAhHA,cAAeC,EAAiG,EAAjGA,iBAAkBC,EAA+E,EAA/EA,mBAAoBC,EAA2D,EAA3DA,cAAezB,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,aAAcd,EAAsB,EAAtBA,oBAE9I,OAEI,yBAAKE,UAAU,WACK,IAAlBgC,EAAQK,QAAiB,kBAAC,EAAD,CAAQ7C,KAAK,MAAMC,KAAK,0DAAaI,GAAI,EAAGF,aAAcA,EAAcD,QAASuC,IACxG,wBAAIjC,UAAU,oBAEVgC,EAAQL,KAAI,SAACW,GACT,OAAO,wBAAIV,IAAKU,EAAKzC,IAAI,kBAAC,EAAD,CAASL,KAAK,SAAUC,KAAM6C,EAAKC,KAAM3C,MAAO0C,EAAK1C,MAAOC,GAAIyC,EAAKzC,GAAIF,aAAcA,EAAcD,QAASuC,EAAenC,oBAAqBA,SAInL,kBAAC,EAAD,CAAQN,KAAK,MAAOC,KAAK,kFAAiBC,QAASwC,EAAkBrC,GAAI2C,MACzE,kBAAC,EAAD,CAAO/B,SAAU2B,EAAe1B,SAAUyB,EAAoBxB,OAAQA,EAAQC,aAAcA,K,YCjBzF,SAAS6B,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,YACAC,EAGC,EAHDA,aACAC,EAEC,EAFDA,aAEC,EACoBhC,IAAMC,SAAS4B,EAAKjD,MAAlCwB,EADN,oBAEK6B,EAAYJ,EAAKK,UAAY,CAAEC,eAAgB,gBAAmB,GACxE,OACE,yBAAKhD,UAAU,QACb,4BACEA,UAAS,yBACP0C,EAAKK,WAAa,8BAEpBrD,QAAS,WACPiD,EAAYD,EAAK7C,OAKnB,uBACEG,UAAU,aACVD,MAAO+C,EACPG,QAAS,SAAC3C,GACRsC,EAAaF,EAAK7C,GAAIS,EAAIkB,OAAO0B,YAEnCC,OAAQ,SAAC7C,GACPsC,EAAaF,EAAK7C,GAAIS,EAAIkB,OAAO0B,YAEnCE,UAAW,SAAC9C,GACM,UAAZA,EAAIsB,MACNtB,EAAIa,iBACJb,EAAIkB,OAAO6B,SAGfC,iBAAkBZ,EAAKK,UACvBQ,gCAAgC,GAE/BtC,GAEL,4BACEjB,UAAU,eACVN,QAAS,WACPmD,EAAaH,EAAK7C,Q,MC5Cb,SAAS2D,EAAT,GAaX,IAZFjB,EAYC,EAZDA,KACAkB,EAWC,EAXDA,aACA7D,EAUC,EAVDA,MACA+C,EASC,EATDA,YACAC,EAQC,EARDA,aACAc,EAOC,EAPDA,gBACA7D,EAMC,EANDA,GACAgD,EAKC,EALDA,aACAc,EAIC,EAJDA,eACAhD,EAGC,EAHDA,OACAiD,EAEC,EAFDA,oBACAC,EACC,EADDA,QACC,EACoBhD,IAAMC,SAASyB,GAA7BtB,EADN,sBAEyCJ,IAAMC,SAAS+C,GAFxD,mBAEM9C,EAFN,KAEqBC,EAFrB,OAG+CH,IAAMC,UAAS,GAH9D,mBAGMgD,EAHN,KAGwBC,EAHxB,KAID,OACE,yBAAK/D,UAAU,cACb,wBACEiD,QAAS,SAAC3C,GACRqD,EAAe9D,EAAIS,EAAIkB,OAAO0B,YAEhCC,OAAQ,SAAC7C,GACPqD,EAAe9D,EAAIS,EAAIkB,OAAO0B,YAEhCE,UAAW,SAAC9C,GACM,UAAZA,EAAIsB,MACNtB,EAAIa,iBACJb,EAAIkB,OAAO6B,SAGfrD,UAAU,oBACVD,MAAO,CAAEH,MAAOA,GAChB0D,gBAAgB,OAChBC,gCAAgC,GAE/BtC,GAEH,yBAAKjB,UAAU,oBAAf,KACA,yBACEA,UAAS,kCACP8D,GAAoB,wCAGrBnD,EAAOgB,KAAI,SAAC/B,GACX,OACE,uBACEgC,IAAKhC,EAAMC,GACXG,UAAS,+BACPJ,EAAMC,KAAOkB,GAAiB,oCAEhCrB,QAAS,WACPsB,EAAiBpB,EAAMC,KAEzBE,MAAO,CAAEM,gBAAiBT,EAAMiC,UAItC,4BACE7B,UAAU,gCACVN,QAAS,WACPkE,EAAoB/D,EAAIkB,GACxBgD,GAAoB,KAJxB,2DAUF,4BACE/D,UAAU,wBACVN,QAAS,WACPqE,GAAoB,MAGvBN,EAAa9B,KAAI,SAACe,GACjB,OACE,kBAAC,EAAD,CACEG,aAAcA,EACdjB,IAAKc,EAAK7C,GACV6C,KAAMA,EACNC,YAAaA,EACbC,aAAcA,OAKK,IAAxBa,EAAapB,QACZ,uBAAGrC,UAAU,qBAAb,2GAEF,4BACEA,UAAU,kBACVN,QAAS,WACPgE,EAAgB7D,OC5FX,SAASmE,EAAT,GAA2I,IAA1HhC,EAAyH,EAAzHA,QAASiC,EAAgH,EAAhHA,MAAOtB,EAAyG,EAAzGA,YAAaC,EAA4F,EAA5FA,aAAec,EAA6E,EAA7EA,gBAAkBb,EAA2D,EAA3DA,aAAcc,EAA6C,EAA7CA,eAAehD,EAA8B,EAA9BA,OAAQiD,EAAsB,EAAtBA,oBACjI,OACE,yBAAK5D,UAAU,WACZgC,EAAQL,KAAI,SAACW,GACZ,OACE,kBAAC,EAAD,CACAsB,oBAAqBA,EACrBjD,OAAQA,EACVgD,eAAgBA,EACdd,aAAcA,EACdhD,GAAIyC,EAAKzC,GACTgE,QAASvB,EAAKuB,QACdH,gBAAiBA,EACjBd,aAAcA,EACdD,YAAcA,EACZf,IAAKU,EAAKzC,GACV0C,KAAMD,EAAKC,KACXkB,aAAcQ,EAAMC,QAAO,SAACxB,GAC1B,OAAOA,EAAKyB,SAAW7B,EAAKzC,MAE9BD,MAAO0C,EAAK1C,WAKG,IAAnBoC,EAAQK,QAAgB,uBAAGrC,UAAU,kBAAb,4G,WCzBjB,SAASoE,IAAO,IAAD,EACYvD,IAAMC,SAAS,GAD3B,mBACrBnB,EADqB,KACP0E,EADO,OAEExD,IAAMC,SAClCwD,aAAaC,QAAQ,WACjBC,KAAKC,MAAMH,aAAaC,QAAQ,YAChC,WAKE,OAJAD,aAAaI,QACX,UACAF,KAAKG,UAAUC,EAAgBC,QAE1BL,KAAKC,MAAMH,aAAaC,QAAQ,cAVnB,mBAErBvC,EAFqB,KAEZ8C,EAFY,OAaFjE,IAAMC,SAC9BwD,aAAaC,QAAQ,SACjBC,KAAKC,MAAMH,aAAaC,QAAQ,UAChC,WAEE,OADAD,aAAaI,QAAQ,QAASF,KAAKG,UAAUC,EAAgBX,QACtDO,KAAKC,MAAMH,aAAaC,QAAQ,YAlBnB,mBAarBN,EAbqB,KAadc,EAbc,OAqBXlE,IAAMC,SACrBwD,aAAaC,QAAQ,UACjBC,KAAKC,MAAMH,aAAaC,QAAQ,WAChC,WAKE,OAJAD,aAAaI,QACX,SACAF,KAAKG,UAAUC,EAAgBjE,SAE1B6D,KAAKC,MAAMH,aAAaC,QAAQ,aARxC5D,EArBqB,sBAgCYE,IAAMC,UAAS,GAhC3B,mBAgCrBsB,EAhCqB,KAgCN4C,EAhCM,KAiCtBC,EAAiB,SAACrD,EAAKsD,GAC3BZ,aAAa1C,GAAO4C,KAAKG,UAAUO,IAe/BtE,EAAe,WACnBoE,GAAe,IA8CjBhD,EAAQL,KAAI,SAACW,GAEX,OADAA,EAAK1C,MAAQe,EAAOwE,MAAK,SAACvF,GAAD,OAAWA,EAAMC,KAAOyC,EAAKuB,WAAShC,IACxDS,KAET,IAAM8C,EAAU,SAACpD,EAASiC,GACxB,IAAMoB,EAAU,YAAOrD,GACnBsD,EAAQ,YAAOrB,GACnBqB,EAAS3D,KAAI,SAACe,EAAM6C,GAElB,OADA7C,EAAK7C,GAAK0F,EAAY,EACf7C,KAET2C,EAAW1D,KAAI,SAAC6D,EAAQC,GAStB,OARqBH,EAASpB,QAAO,SAACxB,GACpC,OAAOA,EAAKyB,SAAWqB,EAAO3F,MAEnB8B,KAAI,SAACe,GAEhB,OADAA,EAAKyB,OAASsB,EAAc,EACrB/C,KAET8C,EAAO3F,GAAK4F,EAAc,EACnBD,KAETV,EAAWO,GACXJ,EAAe,UAAWI,GAC1BN,EAASO,GACTL,EAAe,QAASK,IAa1B,OACE,yBAAKtF,UAAU,QACb,kBAAC+B,EAAD,CACEC,QAASA,EACTrC,aAAcA,EACduC,iBAnFmB,WACvB8C,GAAe,IAmFX/C,cAvFgB,SAACpC,GACrBwE,EAAgBxE,IAuFZuC,cAAeA,EACfD,mBA1GqB,SAACI,EAAMsB,GAChC,IAAMwB,EAAU,YAAOrD,GACvBqD,EAAWK,KAAK,CACdnD,KAAMA,EACNsB,QAASA,EACThE,GAAImC,EAAQA,EAAQK,OAAS,GAAKL,EAAQA,EAAQK,OAAS,GAAGxC,GAAK,EAAI,IAIzEuF,EAAQC,EAAYpB,GACpBrD,KAiGID,OAAQA,EACRC,aAAcA,EACdd,oBAtFsB,SAACD,GAC3BwE,EAAgB,GAChB,IAAMgB,EAAU,YAAOrD,GACjB2D,EAASN,EAAWO,WAAU,SAACtD,GAAD,OAAUA,EAAKzC,KAAOA,KAC1DwF,EAAWQ,OAAOF,EAAQ,GAC1B,IAAIL,EAAQ,YAAOrB,GACnBqB,EAAWA,EAASpB,QAAO,SAAC5B,GAAD,OAAUA,EAAK6B,SAAWtE,KACrDuF,EAAQC,EAAYC,MAiFlB,kBAAC,EAAD,CACE3B,eAzBiB,SAAC9D,EAAI4B,GAC1B,IAAM4D,EAAU,YAAOrD,GACvBqD,EAAWF,MAAK,SAAC7C,GAAD,OAAUA,EAAKzC,KAAOA,KAAI0C,KAAOd,EACjD2D,EAAQC,EAAYpB,IAuBhBpB,aA3De,SAACiD,GACpB,IAAMR,EAAQ,YAAOrB,GACf0B,EAASL,EAASM,WAAU,SAACtD,GAAD,OAAUA,EAAKzC,KAAOiG,KACxDR,EAASO,OAAOF,EAAQ,GACxBP,EAAQpD,EAASsD,IAwDb5B,gBAtEkB,SAACqC,GACvBC,QAAQC,IAAIF,GACZ,IAAMG,EAAU,CACd/B,OAAQ4B,EACRtG,KAAM,GACNsD,WAAW,EACXlD,GAAIoE,EAAMA,EAAM5B,OAAS,GAAK4B,EAAMA,EAAM5B,OAAS,GAAGxC,GAAK,EAAI,GAEjEuF,EAAQpD,EAAD,sBAAciC,GAAd,CAAqBiC,MA+DxBtD,aA5Ee,SAAC/C,EAAI4B,GACxB,IAAM6D,EAAQ,YAAOrB,GACrBqB,EAASH,MAAK,SAAC7C,GAAD,OAAUA,EAAKzC,KAAOA,KAAIJ,KAAOgC,EAC/C2D,EAAQpD,EAASsD,IA0Eb3C,YApFc,SAAC9C,GACnB,IAAMyF,EAAQ,YAAOrB,GACrBqB,EAASH,MAAK,SAAC7C,GAAD,OAAUA,EAAKzC,KAAOA,KAAIkD,WAAauC,EAASH,MAC5D,SAAC7C,GAAD,OAAUA,EAAKzC,KAAOA,KACtBkD,UACFqC,EAAQpD,EAASsD,IAgFb3E,OAAUA,EACVqB,QACmB,IAAjBrC,EACIqC,EACA,CAACA,EAAQmD,MAAK,SAAC7C,GAAD,OAAUA,EAAKzC,KAAOF,MAE1CsE,MAAOA,EACPL,oBAhCsB,SAAC/D,EAAI4B,GAC/B,IAAM4D,EAAU,YAAOrD,GACvBqD,EAAWF,MAAK,SAAC7C,GAAD,OAAUA,EAAKzC,KAAOA,KAAIgE,QAAUpC,EACpD2D,EAAQC,EAAYpB,O,MClIxBkC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjC,EAAD,OAEFkC,SAASC,eAAe,W","file":"static/js/main.600cbd27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/allFolders.244e2000.svg\";","module.exports = __webpack_public_path__ + \"static/media/addFolder.ba9a0c8a.svg\";","import React from 'react'\r\nimport \"./Folder.scss\"\r\nimport allFoldersSvg from \"../../assets/allFolders.svg\"\r\nimport addFolderSvg from \"../../assets/addFolder.svg\"\r\n\r\nexport default function Folder({type, text, onClick, activeFolder, color, id, onDeleteFolderClick}) {\r\n    const style = type === \"add\"  ? {color: '#767676'}: {}\r\n    return (\r\n        <div className={`sidebar__folder ${ id === activeFolder && \"sidebar__folder_type_active\"}`} onClick={() => { onClick(id)} }>\r\n            {\r\n               type === \"all\" && (<img className=\"sidebar__icon\" src={allFoldersSvg} alt=\"Иконка всех задач\"  />)\r\n            }\r\n            {\r\n                type === \"add\" && (<img className=\"sidebar__icon\" src={addFolderSvg} alt=\"Иконка добавления задач\"  />)\r\n            }\r\n            {\r\n                type === \"folder\" &&(<i className=\"sidebar__icon sidebar__icon_type_folder\"  style={\r\n                    {backgroundColor: color}\r\n                } ></i>)\r\n            }\r\n            <h2 className=\"sidebar__folder-name\" style={style}>{text}</h2>\r\n            {\r\n                type === \"folder\" &&(<button className=\"sidebar__delete\" onClick={(evt) => {\r\n                    evt.stopPropagation()\r\n                    onDeleteFolderClick(id)\r\n                }}></button>)\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./Popup.scss\";\r\n\r\nexport default function Popup({ isActive, onSubmit, colors, onPopupClose }) {\r\n  const [selectedColor, setSelectedColor] = React.useState(1);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  return (\r\n    <form\r\n      onSubmit={(evt) => {\r\n        evt.preventDefault();\r\n        onSubmit(inputValue, selectedColor);\r\n        setTimeout(()=> {setInputValue('')\r\n            setSelectedColor(1)}, 200)\r\n            }\r\n      }\r\n      className={`popup ${isActive && \"popup_type_visible\"}`}\r\n      noValidate\r\n    >\r\n      <input\r\n        className=\"popup__input\"\r\n        type=\"text\"\r\n        placeholder=\"Название папки\"\r\n        onChange={(evt) => {\r\n          setInputValue(evt.target.value);\r\n        }}\r\n        required\r\n        value={inputValue}\r\n      ></input>\r\n      <div className=\"popup__checkboxes\">\r\n        {colors.map((color) => {\r\n          return (\r\n            <i\r\n              key={color.id}\r\n              className={`popup__radiobox ${\r\n                color.id === selectedColor && \"popup__radiobox_type_active\"\r\n              }`}\r\n              onClick={() => {\r\n                setSelectedColor(color.id);\r\n              }}\r\n              style={{ backgroundColor: color.hex }}\r\n            ></i>\r\n          );\r\n        })}\r\n      </div>\r\n      <button type=\"submit\" className={`popup__submit ${ !inputValue && \"popup__submit_type_disabled\"}`} disabled={!inputValue && \"disabled\"}>\r\n        Добавить\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"popup__exit\"\r\n        onClick={() => {onPopupClose()\r\n            setTimeout(()=> {setInputValue('')\r\n            setSelectedColor(1)}, 200)\r\n            }}\r\n      ></button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Folder from \"../Folder\"\r\nimport \"./SideBar.scss\";\r\nimport Popup from \"../Popup\"\r\n\r\n\r\nexport default function Sidebar({folders, activeFolder, onFolderClick, onAddFolderClick, popupSubmitHandler, isPopupActive, colors, onPopupClose, onDeleteFolderClick}) {\r\n    \r\n    return (\r\n        \r\n        <div className=\"sidebar\">\r\n       {  folders.length !==0 &&   <Folder type=\"all\" text=\"Все задачи\" id={0} activeFolder={activeFolder} onClick={onFolderClick}/>}\r\n            <ul className=\"sidebar__folders\">\r\n            {\r\n                folders.map((item) => {\r\n                    return <li key={item.id}><Folder  type=\"folder\"  text={item.name} color={item.color} id={item.id} activeFolder={activeFolder} onClick={onFolderClick} onDeleteFolderClick={onDeleteFolderClick}/></li>\r\n                })\r\n            }\r\n            </ul>\r\n            <Folder type=\"add\"  text=\"Добавить папку\" onClick={onAddFolderClick} id={Infinity} />\r\n            <Popup isActive={isPopupActive} onSubmit={popupSubmitHandler} colors={colors} onPopupClose={onPopupClose}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Task.scss\";\r\n\r\nexport default function Task({\r\n  task,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onTaskDelete,\r\n\r\n}) {\r\n  const [inputValue] = React.useState(task.text);\r\n  const textStyle = task.completed ? { textDecoration: \"line-through\" } : {};\r\n  return (\r\n    <div className=\"task\">\r\n      <button\r\n        className={`task__checkbox ${\r\n          task.completed && \"task__checkbox_type_active\"\r\n        }`}\r\n        onClick={() => {\r\n          onTaskClick(task.id);\r\n        }}\r\n      ></button>\r\n\r\n   \r\n        <p\r\n          className=\"task__text\"\r\n          style={textStyle}\r\n          onInput={(evt) => {\r\n            onTaskChange(task.id, evt.target.innerText);\r\n          }}\r\n          onBlur={(evt) => {\r\n            onTaskChange(task.id, evt.target.innerText);\r\n          }}\r\n          onKeyDown={(evt) => {\r\n            if (evt.key === \"Enter\") {\r\n              evt.preventDefault();\r\n              evt.target.blur()\r\n            }\r\n          }}\r\n          contentEditable={!task.completed}\r\n          suppressContentEditableWarning={true}     \r\n        >\r\n          {inputValue}\r\n        </p>\r\n      <button\r\n        className=\"task__delete\"\r\n        onClick={() => {\r\n          onTaskDelete(task.id);\r\n        }}\r\n      ></button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Task from \"../Task\";\r\nimport \"./TaskFolder.scss\";\r\n\r\nexport default function TaskFolder({\r\n  name,\r\n  currentTasks,\r\n  color,\r\n  onTaskClick,\r\n  onTaskChange,\r\n  onAddTaskButton,\r\n  id,\r\n  onTaskDelete,\r\n  onFolderChange,\r\n  colors,\r\n  onFolderColorChange,\r\n  colorId,\r\n}) {\r\n  const [inputValue] = React.useState(name);\r\n  const [selectedColor, setSelectedColor] = React.useState(colorId);\r\n  const [isColorRedacting, setIsColorRedacting] = React.useState(false);\r\n  return (\r\n    <div className=\"taskFolder\">\r\n      <h2\r\n        onInput={(evt) => {\r\n          onFolderChange(id, evt.target.innerText);\r\n        }}\r\n        onBlur={(evt) => {\r\n          onFolderChange(id, evt.target.innerText);\r\n        }}\r\n        onKeyDown={(evt) => {\r\n          if (evt.key === \"Enter\") {\r\n            evt.preventDefault();\r\n            evt.target.blur();\r\n          }\r\n        }}\r\n        className=\"taskFolder__title\"\r\n        style={{ color: color }}\r\n        contentEditable=\"true\"\r\n        suppressContentEditableWarning={true}\r\n      >\r\n        {inputValue}\r\n      </h2>\r\n      <div className=\"taskFolder__line\"> </div>\r\n      <div\r\n        className={`taskFolder__checkboxes  ${\r\n          isColorRedacting && \"taskFolder__checkboxes_type_visible\"\r\n        }`}\r\n      >\r\n        {colors.map((color) => {\r\n          return (\r\n            <i\r\n              key={color.id}\r\n              className={`taskFolder__radiobox ${\r\n                color.id === selectedColor && \"taskFolder__radiobox_type_active\"\r\n              }`}\r\n              onClick={() => {\r\n                setSelectedColor(color.id);\r\n              }}\r\n              style={{ backgroundColor: color.hex }}\r\n            ></i>\r\n          );\r\n        })}\r\n        <button\r\n          className=\"taskFolder__checkboxes-button\"\r\n          onClick={() => {\r\n            onFolderColorChange(id, selectedColor);\r\n            setIsColorRedacting(false);\r\n          }}\r\n        >\r\n          Применить\r\n        </button>\r\n      </div>\r\n      <button\r\n        className=\"taskFolder__editColor\"\r\n        onClick={() => {\r\n          setIsColorRedacting(true);\r\n        }}\r\n      ></button>\r\n      {currentTasks.map((task) => {\r\n        return (\r\n          <Task\r\n            onTaskDelete={onTaskDelete}\r\n            key={task.id}\r\n            task={task}\r\n            onTaskClick={onTaskClick}\r\n            onTaskChange={onTaskChange}\r\n          />\r\n        );\r\n      })}\r\n\r\n      {currentTasks.length === 0 && (\r\n        <p className=\"taskFolder__empty\">Задачи отсутствуют</p>\r\n      )}\r\n      <button\r\n        className=\"taskFolder__add\"\r\n        onClick={() => {\r\n          onAddTaskButton(id);\r\n        }}\r\n      ></button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./TaskBar.scss\";\r\n\r\nimport TaskFolder from \"../TaskFolder\";\r\n\r\nexport default function Tasks({ folders, tasks, onTaskClick, onTaskChange , onAddTaskButton , onTaskDelete, onFolderChange,colors, onFolderColorChange}) {\r\n  return (\r\n    <div className=\"taskBar\">\r\n      {folders.map((item) => {\r\n        return (\r\n          <TaskFolder\r\n          onFolderColorChange={onFolderColorChange}\r\n          colors={colors}\r\n        onFolderChange={onFolderChange}\r\n          onTaskDelete={onTaskDelete}\r\n          id={item.id}\r\n          colorId={item.colorId}\r\n          onAddTaskButton={onAddTaskButton}\r\n          onTaskChange={onTaskChange}\r\n          onTaskClick ={onTaskClick }\r\n            key={item.id}\r\n            name={item.name}\r\n            currentTasks={tasks.filter((task) => {\r\n              return task.listId === item.id;\r\n            })}\r\n            color={item.color}\r\n          />\r\n        );\r\n      })}\r\n      {\r\n        folders.length === 0 && <p className=\"taskBar__empty\">Задачи отсутствуют</p>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Sidebar from \"./components/SideBar\";\r\nimport TaskBar from \"./components/TaskBar\";\r\nimport DataBaseInitial from \"./assets/db.json\";\r\n\r\nexport default function App() {\r\n  const [activeFolder, setActiveFolder] = React.useState(0);\r\n  const [folders, setFolders] = React.useState(\r\n    localStorage.getItem(\"folders\")\r\n      ? JSON.parse(localStorage.getItem(\"folders\"))\r\n      : () => {\r\n          localStorage.setItem(\r\n            \"folders\",\r\n            JSON.stringify(DataBaseInitial.lists)\r\n          );\r\n          return JSON.parse(localStorage.getItem(\"folders\"));\r\n        }\r\n  );\r\n  const [tasks, setTasks] = React.useState(\r\n    localStorage.getItem(\"tasks\")\r\n      ? JSON.parse(localStorage.getItem(\"tasks\"))\r\n      : () => {\r\n          localStorage.setItem(\"tasks\", JSON.stringify(DataBaseInitial.tasks));\r\n          return JSON.parse(localStorage.getItem(\"tasks\"));\r\n        }\r\n  );\r\n  const [colors] = React.useState(\r\n    localStorage.getItem(\"colors\")\r\n      ? JSON.parse(localStorage.getItem(\"colors\"))\r\n      : () => {\r\n          localStorage.setItem(\r\n            \"colors\",\r\n            JSON.stringify(DataBaseInitial.colors)\r\n          );\r\n          return JSON.parse(localStorage.getItem(\"colors\"));\r\n        }\r\n  );\r\n  const [isPopupActive, setPopupActive] = React.useState(false);\r\n  const refreshStorage = (key, data) => {\r\n    localStorage[key] = JSON.stringify(data);\r\n  };\r\n  const popupSubmitHandler = (name, colorId) => {\r\n    const newFolders = [...folders];\r\n    newFolders.push({\r\n      name: name,\r\n      colorId: colorId,\r\n      id: folders[folders.length - 1] ? folders[folders.length - 1].id + 1 : 1,\r\n    });\r\n    /*     setFolders(newFolders);\r\n    refreshStorage(\"folders\", newFolders); */\r\n    reIndex(newFolders, tasks);\r\n    onPopupClose();\r\n  };\r\n\r\n  const onPopupClose = () => {\r\n    setPopupActive(false);\r\n  };\r\n\r\n  const onFolderClick = (id) => {\r\n    setActiveFolder(id);\r\n  };\r\n  const onAddFolderClick = () => {\r\n    setPopupActive(true);\r\n  };\r\n  const onDeleteFolderClick = (id) => {\r\n    setActiveFolder(0);\r\n    const newFolders = [...folders];\r\n    const itemId = newFolders.findIndex((item) => item.id === id);\r\n    newFolders.splice(itemId, 1);\r\n    let newTasks = [...tasks];\r\n    newTasks = newTasks.filter((item) => item.listId !== id);\r\n    reIndex(newFolders, newTasks);\r\n  };\r\n  const onTaskClick = (id) => {\r\n    const newTasks = [...tasks];\r\n    newTasks.find((item) => item.id === id).completed = !newTasks.find(\r\n      (item) => item.id === id\r\n    ).completed;\r\n    reIndex(folders, newTasks);\r\n  };\r\n  const onTaskChange = (id, value) => {\r\n    const newTasks = [...tasks];\r\n    newTasks.find((item) => item.id === id).text = value;\r\n    reIndex(folders, newTasks);\r\n  };\r\n  const onAddTaskButton = (FolderId) => {\r\n    console.log(FolderId);\r\n    const newTask = {\r\n      listId: FolderId,\r\n      text: \"\",\r\n      completed: false,\r\n      id: tasks[tasks.length - 1] ? tasks[tasks.length - 1].id + 1 : 1,\r\n    };\r\n    reIndex(folders, [...tasks, newTask]);\r\n  };\r\n  const onTaskDelete = (taskId) => {\r\n    const newTasks = [...tasks];\r\n    const itemId = newTasks.findIndex((item) => item.id === taskId);\r\n    newTasks.splice(itemId, 1);\r\n    reIndex(folders, newTasks);\r\n  };\r\n  folders.map((item) => {\r\n    item.color = colors.find((color) => color.id === item.colorId).hex;\r\n    return item;\r\n  });\r\n  const reIndex = (folders, tasks) => {\r\n    const newFolders = [...folders];\r\n    let newTasks = [...tasks];\r\n    newTasks.map((task, taskIndex) => {\r\n      task.id = taskIndex + 1;\r\n      return task;\r\n    });\r\n    newFolders.map((folder, folderIndex) => {\r\n      const foldersTasks = newTasks.filter((task) => {\r\n        return task.listId === folder.id;\r\n      });\r\n      foldersTasks.map((task) => {\r\n        task.listId = folderIndex + 1;\r\n        return task;\r\n      });\r\n      folder.id = folderIndex + 1;\r\n      return folder;\r\n    });\r\n    setFolders(newFolders);\r\n    refreshStorage(\"folders\", newFolders);\r\n    setTasks(newTasks);\r\n    refreshStorage(\"tasks\", newTasks);\r\n  };\r\n  const onFolderChange = (id, value) => {\r\n    const newFolders = [...folders];\r\n    newFolders.find((item) => item.id === id).name = value;\r\n    reIndex(newFolders, tasks);\r\n  };\r\n  const onFolderColorChange = (id, value) => {\r\n    const newFolders = [...folders];\r\n    newFolders.find((item) => item.id === id).colorId = value;\r\n    reIndex(newFolders, tasks);\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <Sidebar\r\n        folders={folders}\r\n        activeFolder={activeFolder}\r\n        onAddFolderClick={onAddFolderClick}\r\n        onFolderClick={onFolderClick}\r\n        isPopupActive={isPopupActive}\r\n        popupSubmitHandler={popupSubmitHandler}\r\n        colors={colors}\r\n        onPopupClose={onPopupClose}\r\n        onDeleteFolderClick={onDeleteFolderClick}\r\n      />\r\n      <TaskBar\r\n        onFolderChange={onFolderChange}\r\n        onTaskDelete={onTaskDelete}\r\n        onAddTaskButton={onAddTaskButton}\r\n        onTaskChange={onTaskChange}\r\n        onTaskClick={onTaskClick}\r\n        colors = {colors}\r\n        folders={\r\n          activeFolder === 0\r\n            ? folders\r\n            : [folders.find((item) => item.id === activeFolder)]\r\n        }\r\n        tasks={tasks}\r\n        onFolderColorChange={onFolderColorChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}